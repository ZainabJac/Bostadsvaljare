@page "/"

@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using BlazorPro.Spinkit

@implements IDisposable
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager navManager



<SpinLoader IsLoading="@(MapData == null || !ImagesLoaded)">
    <LoadingTemplate>
        <div style="text-align:center; padding-top:18%;">
            <span class="loader"><span class="loader-inner"></span></span> <text style="color:#415965; font-weight:bold; font-family:acumin-pro,sans-serif;"> Loading.. </text>
            <Plane Center="true" />
        </div>
    </LoadingTemplate>
    <ContentTemplate>
        <div id="content">
            <img src="IMG/pixel.gif" alt="" @onload="OnAfterLoader" style="position: absolute; top: 0px; visibility: hidden;" />

            @for (int i = 0; i < Views.Count; i++)
            {
                var _i = i;
                <div id="view-@_i" class="marginmobile" style="@(!ViewsInited || CurrentView == _i ? "" : "display: none;") @(ViewsInited ? "" : "visibility: hidden;")">
                    @for (int j = 0; j < Views[_i].SunStudies.Count; j++)
                    {
                        var _j = j;
                        var sunStudy = _j == 0 ? "morning" : (_j == 1 ? "midday" : "evening");
                        <div id="sun-study-@sunStudy" style="@(!ViewsInited || CurrentStudy == sunStudy ? "" : "display: none;")">

                            @if (IsiOS)
                            {
                                <img id="sun-study-@_i-@sunStudy-img" src="@Views[_i].SunStudies[sunStudy]" view="@_i" sun-study="@sunStudy" usemap="#houses-@_i-@sunStudy" />
                            }
                            <map id="houses-@_i-@sunStudy" name="houses-@_i-@sunStudy">
                                @foreach (KeyValuePair<string, List<Data.HouseMap>> view in MapData)
                                {
                                    if (view.Key == Data.HouseMap.ImageNameToVariant(Views[_i].SunStudies["midday"]))
                                    {
                                        @foreach (Data.HouseMap map in view.Value)
                                        {
                                            <area id="@Data.House.Get(map.ID).Status" status="" href="#"
                                                  @onmouseover="e => OnMouseOverIM(e, map.HouseNumber, Views[_i].ID, map.View)"  onmouseout="hideTooltip()"  @onclick="() => HousingClicked(map.ID, Views[_i].ID, map.View)"
                                                  coords="@map.IMCoords" shape="poly">
                                        }
                                    }
                                }
                            </map>
                        </div>
                    }
                </div>
            }

        <div class="buttonrow">
            <div id="highlight_all_checker">
                <SfChipList Selection="Selection.Single">
                    <ChipListEvents OnClick="OnChangeHighlight"></ChipListEvents>
                    <ChipCollection>
                        <ChipListChip Text="Visa status"></ChipListChip>
                    </ChipCollection>
                </SfChipList>
            </div>
            <div id="view_menu">
                <SfDropDownButton Content="Byt Område">
                    <DropDownButtonEvents OnItemRender="RenderMenuItem" ItemSelected="ChangeView" />
                    <DropDownButtonItems>
                        @for (int i = 0; i < Views.Count; i++)
                        {
                            <DropDownButtonItem Id="@i.ToString()" Text="@Views[i].Name"></DropDownButtonItem>
                        }
                    </DropDownButtonItems>
                </SfDropDownButton>
            </div>

            <div id="sun_study_menu" style="display:none">
                <SfDropDownButton IconCss="e-icons e-sun-study" Content="Solstudie">
                    <DropDownButtonEvents OnItemRender="RenderMenuItem" ItemSelected="ChangeSunStudy" />
                    <DropDownButtonItems>
                        <DropDownButtonItem Id="morning" Text="Morgon"></DropDownButtonItem>
                        <DropDownButtonItem Id="midday" Text="Mitt på dagen"></DropDownButtonItem>
                        <DropDownButtonItem Id="evening" Text="Kväll"></DropDownButtonItem>
                    </DropDownButtonItems>
                </SfDropDownButton>
            </div>


        </div>
        </div>
    </ContentTemplate>
</SpinLoader>

@code {
    public class ViewData
    {
        public string ID { get; set; }
        public string Name { get; set; }
        public string ImageMapName { get; set; }
        public Dictionary<string, string> SunStudies { get; set; }
        public bool Initialized { get; set; } = false;


    }

    List<ViewData> Views = new List<ViewData> {
        new ViewData() {
            ID = "view-1",
            Name = "Översikt",
            ImageMapName = "imagemap-1",
            SunStudies = new Dictionary<string, string>() {
                { "morning", "IMG/OversiktStora_medium.jpg" },
                { "midday", "IMG/OversiktStora_medium.jpg" },
                { "evening", "IMG/OversiktStora_medium.jpg" },
            },
        },

         new ViewData() {
            ID = "view-2",
            Name = "Område 1 - 5",
            ImageMapName = "imagemap-2",
            SunStudies = new Dictionary<string, string>() {
                 { "morning", "IMG/Oversikt1-5_medium.jpg" },
                { "midday", "IMG/Oversikt1-5_medium.jpg"},
                { "evening", "IMG/Oversikt1-5_medium.jpg" },
            },
        },

        new ViewData() {
        ID = "view-3",
            Name = "Område 6, 7 och 10",
            ImageMapName = "imagemap-3",
            SunStudies = new Dictionary<string, string>() {
                  { "morning", "IMG/Oversikt_V2_medium.jpg" },
                { "midday", "IMG/Oversikt_V2_medium.jpg"},
                { "evening", "IMG/Oversikt_V2_medium.jpg" },

            },
                 },

        new ViewData() {
            ID = "view-4",
            Name = "Område 8",
            ImageMapName = "imagemap-4",
            SunStudies = new Dictionary<string, string>() {
                { "morning", "IMG/Oversikt8_medium.jpg" },
                { "midday", "IMG/Oversikt8_medium.jpg"},
                { "evening", "IMG/Oversikt8_medium.jpg" },
            },
        },
          new ViewData() {
              ID = "view-5",
              Name = "Område 9 och 11",
              ImageMapName = "imagemap-5",
              SunStudies = new Dictionary<string, string>() {
                { "morning", "IMG/Oversikt11_medium.jpg" },
                { "midday", "IMG/Oversikt11_medium.jpg"},
                { "evening", "IMG/Oversikt11_medium.jpg" },
            },
          },
    };

    public Dictionary<string, List<Data.HouseMap>> MapData { get; set; }
    private int CurrentView { get; set; } = 0;
    private string CurrentStudy { get; set; } = "midday";
    private int MobileSelection { get; set; } = -1;

    private bool IsiOS { get; set; } = false;
    private bool ImagesLoaded { get; set; } = false;
    private bool ViewsInited { get; set; } = false;
    private bool highlightAllIsChecked = false;
    private bool firstRenderDone = false;
    private bool TooltipIsdisabled = false;


    protected override void OnInitialized()
    {

        base.OnInitialized();
        this.MapData = Data.HouseMap.GetHouseMapData();
        base.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("mapster_responsive.initialize", true);
            IsiOS = await JSRuntime.InvokeAsync<bool>("util.isiOS");
            ImagesLoaded = await JSRuntime.InvokeAsync<bool>("exterior.loadImages", Views);
            firstRenderDone = true;
            base.StateHasChanged();
        }
    }

    private async void OnAfterLoader(Microsoft.AspNetCore.Components.Web.ProgressEventArgs ev)
    {

        await JSRuntime.InvokeVoidAsync("util.enableContent");
        await JSRuntime.InvokeVoidAsync("util.enableClickMenu");
        await JSRuntime.InvokeVoidAsync("exterior.applyImages");
        ViewsInited = true;
        base.StateHasChanged();
    }

    private void RenderMenuItem(Syncfusion.Blazor.SplitButtons.MenuEventArgs args)
    {
        args.Element.AddClass(new string[] { "item-background" });
    }

    public async void ChangeView(Syncfusion.Blazor.SplitButtons.MenuEventArgs args)
    {
        this.CurrentView = int.Parse(args.Element.ID);
        await JSRuntime.InvokeVoidAsync("exterior.changeImage", this.CurrentView, this.CurrentStudy);

        this.MobileSelection = -1;
        base.StateHasChanged();
    }

    public async void ChangeSunStudy(Syncfusion.Blazor.SplitButtons.MenuEventArgs args)
    {
        this.CurrentStudy = args.Element.ID;
        await JSRuntime.InvokeVoidAsync("exterior.changeImage", this.CurrentView, this.CurrentStudy);

        this.MobileSelection = -1;
        base.StateHasChanged();
    }

    public async void OnMouseOverIM(MouseEventArgs e, string houseNumber, string views, int view)
    {
        if (TooltipIsdisabled == true)
        {
            return;
        }

        else
        {
            double x = e.ClientX;
            double y = e.ClientY;

            if (views == "view-1")
            {
                string msg2 = "";

                if (view == 1 )
                {
                    msg2 = "6, 7 och 10";
                }

                else if (view == 4)
                {
                    msg2 = "9 och 11";
                }

                else if (view == 2)
                {
                    msg2 = "1 - 5";
                }

                else if (view == 3)
                {
                    msg2 = "8";
                }

                string msg;


                msg = "Område \t" + msg2;

                await JSRuntime.InvokeVoidAsync(
              "util.showTooltip", x, y, msg);
            }

            else
            {


                string msg;
                Data.House house = null;
                foreach (Data.House h in Data.House.GetHouseData())
                {
                    if (h.HouseNumber == houseNumber)
                    {
                        house = h;
                        break;
                    }
                }

                switch (house.Status)
                {
                    case "sold":
                        msg = "Såld";
                        break;
                    case "booked":
                        msg = "Reserverad";
                        break;
                    default:
                        msg = "Hus nr.\t" + houseNumber +
                            "\nBoarea:\t" + house.Sqm + "m²" +
                            "\nPris: \t" + house.Price;
                        break;
                }

                await JSRuntime.InvokeVoidAsync(
                    "util.showTooltip", x, y, msg
                );
            }
        }
    }


    public async void OnChangeHighlight(Syncfusion.Blazor.Buttons.ClickEventArgs e)
    {
        highlightAllIsChecked = !highlightAllIsChecked;
        if (highlightAllIsChecked)
            await JSRuntime.InvokeVoidAsync("mapster.selectAll");
        else
            await JSRuntime.InvokeVoidAsync("mapster.deselect");
    }

    private async void ShowTooltip(double x, double y, string houseNumber)
    {


        string msg;
        Data.House house = null;
        foreach (Data.House h in Data.House.GetHouseData()) {
            if (h.HouseNumber == houseNumber) {
                house = h;
                break;
            }
        }

        switch (house.Status) {
            case "sold":
                msg = "Såld";
                break;
            case "booked":
                msg = "Reserverad";
                break;
            default:
                msg = "Hus nr.\t" + houseNumber +
                    "\nBoarea:\t" + house.Sqm + "m²" +
                    "\nPris: \t" + house.Price;
                break;
        }

        await JSRuntime.InvokeVoidAsync(
            "util.showTooltip", x, y, msg
        );
    }



    private async void HousingClicked(int houseID, string ID, int view)
    {
        if (ID == "view-1")
        {
            this.CurrentView = view;
            await JSRuntime.InvokeVoidAsync("exterior.changeImage", view, this.CurrentStudy);

            this.MobileSelection = -1;
            base.StateHasChanged();
        }

        else {

            var mobile = await JSRuntime.InvokeAsync<bool>("util.isDevice");
            if (mobile && MobileSelection != houseID)
            {
                //ShowTooltip(x, y, houseID);
                MobileSelection = houseID;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("util.disableContent");
                await JSRuntime.InvokeVoidAsync("util.disableClickMenu");
                await JSRuntime.InvokeVoidAsync("util.hideTooltip");
                navManager.NavigateTo("/interior/" + houseID);
            }
        }
    }

    public void Dispose()
    {
        // Need to make sure that it's not trying to invoke JavaScript interop before initialization
        if (!firstRenderDone)
            return;

        DisposeAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("mapster.dispose");
        await JSRuntime.InvokeVoidAsync("mapster_responsive.dispose");
        await JSRuntime.InvokeVoidAsync("exterior.dispose");
    }


}


<style>



    .buttonrow {
        position: fixed;
        top: 60px;
        left: 28px;
        display: flex;
        flex-direction: column;
        justify-content:center;
     

    }

    .e-chip-list.e-chip, .e-chip-list .e-chip {
        width: 122px;
        height: 34px;
        border-radius: 3px;
        background-color: #555555;
        color: white;
        font-family: acumin-pro,sans-serif;
        margin-left: -2px;
        padding-left: 12px;
        padding-right: 12px;
        padding-bottom: 8px;
        padding-top: 8px;
        font-size: 15px;
    }

   
    .e-checkicon {
        background-color: white;
        padding: 6px 12px 4px;
        padding-top: 6px;
        padding-right: 6px;
        padding-bottom: 4px;
        padding-left: 6px
    }


    #view_menu {
     /*   position: fixed;
        top: 65px;
        left: 130px;*/
        display: inline-block;
    }

    #sun_study_menu {
     /*   position: fixed;
        top: 65px;
        left: 7px;*/
        display: inline-block;
    }

    #highlight_all_checker {
     /*   position: fixed;
        top: 65px;
        left: 265px;*/
        display: inline-block;
        padding: 0px;
    }

    .e-dropdown-btn, .e-dropdown-btn.e-btn, .e-dropdown-popup ul, .e-item {
        color: white;
        font-family: acumin-pro,sans-serif;
        font-size: 15px;
        border-radius: 3px;
        padding-top: 8px;
        padding-bottom: 8px;
        background-color: #555555;
    }

    .e-sun-study {

        color: white;
        font-family: acumin-pro,sans-serif;
        display: inline-block;
    }

    @@media (max-width: 1538px) {
        .buttonrow {
            flex-direction: row-reverse;
        }

        .e-dropdown-btn, .e-dropdown-btn.e-btn, .e-dropdown-popup ul, .e-item {
            margin-top: 8px;
            margin-right: 2px;
        }
    }

    @@media (max-width: 1695px){
        .marginmobile {
            margin-top: 30px;
        }


    }

     @@media (max-width: 768px){
        .buttonrow {
            flex-direction: row-reverse;
            top:65px;
        }
         .marginmobile{
             margin-top: 35px;
         }

       
     }

</style>
