@page "/"

@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.SplitButtons
@using BlazorPro.Spinkit

@implements IDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager navManager



<SpinLoader IsLoading="@(MapData == null)">
    <LoadingTemplate>
        <div style="text-align:center; padding-top:18%;">
            <span class="loader"><span class="loader-inner"></span></span> <text style="color:#415965; font-weight:bold; font-family:acumin-pro,sans-serif;"> Loading.. </text>
            <Plane Center="true" />
        </div>
    </LoadingTemplate>
    <ContentTemplate>

        @for (int i = 0; i < Views.Count; i++)
        {
            var _i = i;
            <div id="@Views[i].ID" style="@(!Views[_i].Initialized || CurrentView == _i ? "" : "display: none;") @(Views[_i].Initialized ? "" : "visibility: hidden;")">
                <img id="@(Views[i].ID +"-img")" src="@ExteriorImgPaths[i]" style="width: @ImgWidth;" usemap="#@Views[i].ImageMapName" @onload="e => OnLoadIM(e, _i)">
                <map id="@Views[i].ImageMapName" name="@Views[i].ImageMapName">
                    @foreach (KeyValuePair<string, List<Data.HouseMap>> view in MapData)
                    {
                        if (view.Key == Data.HouseMap.ImageNameToView(ExteriorImgPaths[i]))
                        {
                            @foreach (Data.HouseMap map in view.Value)
                            {
                                <area id="@Data.House.Get(map.ID).Status" status="" href="#"
                                      @onmouseover="e => OnMouseOverIM(e, map.HouseNumber)" @onmouseout="OnMouseOutIM" @onclick="() => HousingClicked(map.ID)"
                                      coords="@map.IMCoords" shape="poly">
                            }
                        }
                    }
                </map>
            </div>
        }

        <div class="buttonrow"> 
        <div id="view_menu">
            <SfDropDownButton IconCss="e-icons e-view" Content="Byt vinkel">
                <DropDownButtonEvents OnItemRender="RenderMenuItem" ItemSelected="ChangeView" />
                <DropDownButtonItems>
                    @for (int i = 0; i < Views.Count; i++)
                    {
                        <DropDownButtonItem Id="@i.ToString()" Text="@Views[i].Name"></DropDownButtonItem>
                    }
                </DropDownButtonItems>
            </SfDropDownButton>
        </div>

        <div id="sun_study_menu">
            <SfDropDownButton IconCss="e-icons e-sun-study" Content="Solstudie">
                <DropDownButtonEvents OnItemRender="RenderMenuItem" ItemSelected="ChangeSunStudy" />
                <DropDownButtonItems>
                    <DropDownButtonItem Id="morning" Text="Morgon"></DropDownButtonItem>
                    <DropDownButtonItem Id="midday" Text="Mitt på dagen"></DropDownButtonItem>
                    <DropDownButtonItem Id="evening" Text="Kväll"></DropDownButtonItem>
                </DropDownButtonItems>
            </SfDropDownButton>
        </div>

        <div id="highlight_all_checker">
            <SfChipList Selection="Selection.Single">
                <ChipListEvents OnClick="OnChangeHighlight"></ChipListEvents>
                <ChipCollection>
                    <ChipListChip Text="Visa ledigt"></ChipListChip>
                </ChipCollection>
            </SfChipList>
        </div>
        </div>
    </ContentTemplate>
</SpinLoader>

@code {
    public class ViewData
    {
        public string ID { get; set; }
        public string Name { get; set; }
        public string ImageMapName { get; set; }
        public Dictionary<string, string> SunStudies { get; set; }
        public bool Initialized { get; set; } = false;
    }

    List<ViewData> Views = new List<ViewData> {
        new ViewData() {
            ID = "view-1",
            Name = "Vy 1",
            ImageMapName = "imagemap-1",
            SunStudies = new Dictionary<string, string>() {
                { "morning", "IMG/Morgon.jpg" },
                { "midday", "IMG/Dag.jpg" },
                { "evening", "IMG/Natt.jpg" },
            },
        },
        new ViewData() {
            ID = "view-2",
            Name = "Vy 2",
            ImageMapName = "imagemap-2",
            SunStudies = new Dictionary<string, string>() {
                { "morning", "IMG/ext. 2.jpg" },
                { "midday", "IMG/ext. 2.jpg" },
                { "evening", "IMG/ext. 2.jpg" },
            },
        },
    };

    public Dictionary<string, List<Data.HouseMap>> MapData { get; set; }
    private int CurrentView { get; set; } = 0;
    private string[] ExteriorImgPaths { get; set; }
    private string ImgWidth { get; set; } = "99%";
    private int MobileSelection { get; set; } = -1;

    private bool highlightAllIsChecked = false;
    private bool firstRenderDone = false;
   

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.ExteriorImgPaths = new string[this.Views.Count];
        this.MapData = Data.HouseMap.GetHouseMapData();
        for (int i = 0; i < this.Views.Count; i++)
        {
            this.ExteriorImgPaths[i] = this.Views[i].SunStudies["midday"];
        }
        base.StateHasChanged();
      

    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("mapster_responsive.initialize", true);
            firstRenderDone = true;
        }

    
    }

    public async void OnLoadIM(Microsoft.AspNetCore.Components.Web.ProgressEventArgs args, int view)
    {
        while (!firstRenderDone)
            await Task.Delay(10);

        if (!Views[view].Initialized)
        {
            await JSRuntime.InvokeVoidAsync(
                "mapster_responsive.setValues", view, Views[view].ID, ImgWidth
            );
            await JSRuntime.InvokeVoidAsync(
                "mapster.addMapHighlights", Views[view].ID, Views[view].ID + "-img", Views[view].ImageMapName, "center"
            );
        }

        Views[view].Initialized = true;
        base.StateHasChanged();

    }

    private void RenderMenuItem(Syncfusion.Blazor.SplitButtons.MenuEventArgs args)
    {
        args.Element.AddClass(new string[] { "item-background" });
    }

    public async void ChangeView(Syncfusion.Blazor.SplitButtons.MenuEventArgs args)
    {
        this.CurrentView = int.Parse(args.Element.ID);
        await JSRuntime.InvokeVoidAsync(
            "mapster.changeImage", this.Views[this.CurrentView].ID, this.ExteriorImgPaths[CurrentView]
        );
        await JSRuntime.InvokeVoidAsync("mapster_responsive.changeImage", this.CurrentView);
        this.MobileSelection = -1;

        base.StateHasChanged();
    }

    public async void ChangeSunStudy(Syncfusion.Blazor.SplitButtons.MenuEventArgs args)
    {
        for (int i = 0; i < this.Views.Count; i++)
        {
            this.ExteriorImgPaths[i] = this.Views[i].SunStudies[args.Element.ID];
        }
        await JSRuntime.InvokeVoidAsync(
            "mapster.changeImage", this.Views[this.CurrentView].ID, this.ExteriorImgPaths[CurrentView]
        );

        this.MobileSelection = -1;
        base.StateHasChanged();
    }

    public void OnMouseOverIM(MouseEventArgs e, string houseNumber)
    {
        ShowTooltip(e.ClientX, e.ClientY, houseNumber);
    }

    public void OnMouseOutIM(MouseEventArgs e)
    {
        HideTooltip();
    }

    public async void OnChangeHighlight(Syncfusion.Blazor.Buttons.ClickEventArgs e)
    {
        highlightAllIsChecked = !highlightAllIsChecked;
        if (highlightAllIsChecked)
            await JSRuntime.InvokeVoidAsync("mapster.selectAll");
        else
            await JSRuntime.InvokeVoidAsync("mapster.deselect");
    }

    private async void ShowTooltip(double x, double y, string houseNumber)
    {
        string msg;
        Data.House house = null;
        foreach (Data.House h in Data.House.GetHouseData()) {
            if (h.HouseNumber == houseNumber) {
                house = h;
                break;
            }
        }

        switch (house.Status) {
            case "sold":
                msg = "Såld";
                break;
            case "booked":
                msg = "Reserverad";
                break;
            default:
                msg = "Lgh nr.\t" + houseNumber +
                    "\nBoarea:\t" + house.Sqm + "m²" +
                    "\nPris:\t\t" + house.Price;
                break;
        }

        await JSRuntime.InvokeVoidAsync(
            "util.showTooltip", x, y, msg
        );
    }

    private async void HideTooltip()
    {
        await JSRuntime.InvokeVoidAsync("util.hideTooltip");
    }

    private async void HousingClicked(int houseID)
    {
        var mobile = await JSRuntime.InvokeAsync<bool>("util.isDevice");
        if (mobile && MobileSelection != houseID)
        {
            MobileSelection = houseID;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("util.hideTooltip");
            navManager.NavigateTo("/interior/" + houseID);
        }
    }

    public async void Dispose()
    {
        // Need to make sure that it's not trying to invoke JavaScript interop before initialization
        if (!firstRenderDone)
            return;

        await JSRuntime.InvokeVoidAsync("mapster_responsive.dispose");
    }


}


<style>

    .buttonrow {
        position: fixed;
        top: 60px;
        left: 10px;
        display: inline-block;
    }

    .e-chip-list.e-chip, .e-chip-list .e-chip {
        border-radius: 3px;
        background-color: #fafafa;
        color: #415965;
        font-family: acumin-pro,sans-serif;
        padding: 7px;
    }



    .e-checkicon {
        background-color: white;
        padding: 6px 12px 4px;
        padding-top: 6px;
        padding-right: 6px;
        padding-bottom: 4px;
        padding-left: 6px
    }


    #view_menu {
     /*   position: fixed;
        top: 65px;
        left: 130px;*/
        display: inline-block;
    }

    #sun_study_menu {
     /*   position: fixed;
        top: 65px;
        left: 7px;*/
        display: inline-block;
    }

    #highlight_all_checker {
     /*   position: fixed;
        top: 65px;
        left: 265px;*/
        display: inline-block;
        padding: 0px;
    }

    .e-view {
        content: url(IMG/icons/noun_rotate_24052.png);
        /* ICON WITHOUT LISCENSE IF USED NEEDS TO BE BOUGHT OR CHNAGED*/
        color: white;
        font-family: acumin-pro,sans-serif;
    }

    .e-dropdown-btn, .e-dropdown-btn.e-btn, .e-dropdown-popup ul, .e-item {
        color: #415965;
        font-family: acumin-pro,sans-serif;
    }

    .e-sun-study {
        content: url(IMG/icons/icons8-day-and-night-100.png);
        /* ICON WITHOUT LISCENSE IF USED NEEDS TO BE BOUGHT OR CHNAGED*/
        color: white;
        font-family: acumin-pro,sans-serif;
    }

    @@media (max-width: 363px) {


        .e-chip-list.e-chip, .e-chip-list .e-chip {
          
            padding: 2px;
        }

        .e-dropdown-btn, .e-dropdown-btn.e-btn, .e-dropdown-popup ul, .e-item {
            color: #415965;
            font-family: acumin-pro,sans-serif;
            padding: 2px;
        }

    }
</style>
