@*@page "/interior"*@
@page "/interior/{HouseID}"

@implements IDisposable
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using BlazorPro.Spinkit


<SpinLoader IsLoading="SelectedImage == null || !ImagesLoaded ">
    <LoadingTemplate>
        <div style="text-align:center; padding-top:18%;">
            <span class="loader"><span class="loader-inner"></span></span> <text style="color:#415965; font-weight:bold; font-family:acumin-pro,sans-serif;"> Loading.. </text>
            <Plane Center="true" />
        </div>
    </LoadingTemplate>
    <ContentTemplate>

        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <img src="IMG/pixel.gif" alt="" @onload="OnAfterLoader" style="position: absolute; top: 0px; visibility: hidden;" />

        <div id="fullscreen-image" class="@(ShowFullscreenImage ? "" : "hidden")">
            <div class="fs-bg" @onclick="OnClickClose">
                <div class="fs-border" @onclick:stopPropagation="true">
                    <span class="fs-close" @onclick="OnClickClose"></span>
                </div>
            </div>
        </div>


        <div class="containerbig">
            <input value="@HouseID" id="houseinputid" style="display:none;" />
            <div class="line-7">
                <!-- Stillbilder -->
                <div id="slideshow" class="@(ShowInfo ? "" : "full")">
                    <div id="gallery-carousel" class="carousel slide" data-ride="carousel">
                        <ol class="carousel-indicators">
                            @for (int i = 0; i < HouseData.Images.Count; i++)
                            {
                                <li data-target="#gallery-carousel" data-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
                            }
                        </ol>
                        <div class="carousel-inner">
                            @for (int i = 0; i < HouseData.Images.Count; i++)
                            {


                                var _i = i;

                                <div id="carousel-item-@_i" class="carousel-item @(_i == 0 ? "active" : "")">
                                    @if (HouseData.Images[_i].Type == Bostadsvaljare.Data.ImageType.Roundme)
                                    {
                                        <div class="iframe-container">
                                            <iframe frameborder='0' webkitallowfullscreen mozallowfullscreen allowfullscreen src="@HouseData.Images[_i].Link" @onload="OnLoadRoundme"> </iframe>
                                        </div>
                                        <img id="@("carosal" +_i)" src="@HouseData.Images[_i].Source" class="hideit" c_ind="@_i">
                                    }
                                    else
                                    {
                                        <img id="@("carosal" +_i)" src="@HouseData.Images[_i].Source" class="d-block w-100" c_ind="@_i">
                                    }
                                </div>

                            }
                        </div>
                        <a class="carousel-control-prev" style="height:25%; margin-top:32.5%;" href="#gallery-carousel" onclick="interior.adjustpan()" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" onclick="interior.adjustpan()" style="height:25%; margin-top:32.5%;" href="#gallery-carousel" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                </div>
            </div>


            <div class="line-4">
                <div style="margin-top:-7px;" class="planritning floorplancontain pan_el">
                    <SfCard>
                        <CardStacked>
                            <div class="btn-group">
                                @for (int i = 0; i < HouseData.Floorplans.Count; i++)
                                {
                                    var _i = i;
                                    <button id="button@_i" class="BtnInbtngrp" @onclick="() => ChangeFloor(_i)">Plan @(_i+1)</button>
                                }
                            </div>
                            <div id="floorplan-main">
                                @for (int i = 0; i < HouseData.Floorplans.Count; i++)
                                {
                                    var _i = i;
                                    <div id="floorplan-@_i" class="@(!FloorplanInited || Floor == _i ? "" : "hidden")" style="position: relative; @(FloorplanInited ? "" : "visibility: hidden;")">
                                        <map id="hotspots-@_i" name="hotspots-@_i">
                                            @for (int j = 0; j < HouseData.Floorplans[_i].Rooms.Count; j++)
                                            {
                                                var _j = j;
                                                var coords = HouseData.Floorplans[_i].Rooms[_j].Coords;
                                                <area id="interior" status="" href="#" @onclick="() => OnClickHotspot(HouseData.Floorplans[_i].Rooms[_j].RoomID)"
                                                      coords="@coords.X,@coords.Y,@Radius" shape="circle">
                                            }
                                        </map>
                                    </div>
                                }
                            </div>
                        </CardStacked>
                    </SfCard>
                </div>



                <div id="gallery" class="gallercontain">
                    @for (int i = 0; i < HouseData.Images.Count; i++)
                    {
                        var _i = i;
                        <span id="gallery-item-@i">
                            <img id="@("galler" + i)" src="@HouseData.Images[i].Source" class="gallery-img" c_ind="@i" @onclick="e=>StaticChangeRoomClick(_i)">
                        </span>
                    }
                </div>


                <div class="infocontain">
                    <div>
                        <SfCard>
                            <CardStacked>
                                <div id="info" class="infodiv">

                                    <div class="textitem">
                                        <text class="card-info-header">Hus nr.</text>

                                    </div>

                                    <div class="textitem">

                                        <text class="card-info-header-fat">@House.HouseNumber</text>
                                    </div>

                                    <div class="textitem2">
                                        <text class="card-info-header">Pris</text>

                                    </div>

                                    <div class="textitem">

                                        <text class="card-info-header-fat">Uppgift saknas</text>
                                    </div>

                                    <div class="textitem">
                                        <text class="card-info-header">Boarea</text>

                                    </div>

                                    <div class="textitem">

                                        <text class="card-info-header-fat">@House.Sqm m²</text>
                                    </div>

                                    <div class="textitem2">
                                        <text class="card-info-header">Tomtarea</text>

                                    </div>

                                    <div class="textitem">

                                        <text class="card-info-header-fat">Uppgift saknas</text>
                                    </div>

                                    <div style="width:100%; display:flex;">
                                        <div class="bofakta-link" style=" width: 20%;">

                                            <a class="card-info-header-fat" href="www.c4hus.se">Bofaktablad</a>
                                        </div>
                                        <div class="rightbutton-div">
                                            <SfButton CssClass="rightbutton" IsPrimary="true">Anmäl intresse nu</SfButton>
                                        </div>
                                    </div>

                                </div>
                            </CardStacked>
                        </SfCard>
                    </div>

                    @*<div class="arkitekt">

                            <SfCard ID="ArkitektenHarOrdet">
                                <CardStacked>
                                    <text class="card-info-header" style="margin-left:6px;">Arkitekten har ordet</text>
                                    <text class="italicfont" style="margin-left:6px;">"@HouseData.Comment" </text>
                                </CardStacked>
                            </SfCard>

                        </div>*@
                </div>
            </div>
        </div>

        @*<BSImage id="hide_info" src="IMG/icons/info.png" Class="icon" @onclick="ToggleInfo" />*@
        @*<SfButton id="hide_info" CssClass="e-round" IconCss="icon e-icons e-info-icon" />*@

    </ContentTemplate>
</SpinLoader>

@code {
    public string MoveIcon2 { get; set; } = "position: absolute; left: 52%; top: 12px;";
    public string MoveIcon { get; set; } = "position: absolute; left: 78%; top: 17px;";
    public string MinimapHide { get; set; } = "display: initial;";
    private bool isChecked = true;
    public Dictionary<string, List<Data.House>> MapData { get; set; }

    [Parameter]

    public string HouseID { get; set; }
    public Data.House House { get; set; }
    public Data.HouseType.Image SelectedImage { get; set; }
    public Data.ImageType SelectedType { get; set; }
    public bool ShowInfo { get; set; } = true;

    private Data.HouseType HouseData { get; set; }
    private bool ShowFullscreenImage { get; set; } = false;
    private int Floor { get; set; } = 0;
    private int Radius { get; set; } = 15;
    private bool ImagesLoaded { get; set; } = false;
    private bool FloorplanInited { get; set; } = false;
    private bool InitVR { get; set; } = false;
    private bool InitRoundme { get; set; } = false;
    private bool firstRenderDone = false;

    private static Interior self;



    protected override void OnInitialized()
    {
        base.OnInitialized();

        House = Data.House.Get(int.Parse(HouseID));
        string houseType = House.Housetype;
        HouseData = Data.HouseType.GetData(houseType);
        self = this;



        SelectedImage = HouseData.Images[0];

        base.StateHasChanged();
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            await JSRuntime.InvokeVoidAsync("mapster_responsive.initialize", false);
            await JSRuntime.InvokeVoidAsync("interior.addResizeListener");
            ImagesLoaded = await JSRuntime.InvokeAsync<bool>("interior.loadImages", House.Housetype, HouseData);
            firstRenderDone = true;
            base.StateHasChanged();
        }
    }

    private async void OnAfterLoader(ProgressEventArgs ev)
    {
        await JSRuntime.InvokeVoidAsync("util.enableClickMenu");
        await JSRuntime.InvokeVoidAsync("interior.applyImages", House.Housetype);
        //await JSRuntime.InvokeVoidAsync("pan_viewer.init", "apt_data");
        FloorplanInited = true;
        base.StateHasChanged();
        await JSRuntime.InvokeVoidAsync("interior.resize");
        await JSRuntime.InvokeVoidAsync("interior.hidecolorpicker");
        //await JSRuntime.InvokeVoidAsync("interior.adjustfloorplan");
        await JSRuntime.InvokeVoidAsync("util.enableContent");


    }

    private async void OnLoadVR(ProgressEventArgs ev)
    {
        // Change height on #vr_video to be its width*2/3
        await JSRuntime.InvokeVoidAsync("util.matchHeightToWidth", "vr_video");
        InitVR = true;
        base.StateHasChanged();
    }

    private async void OnLoadRoundme(ProgressEventArgs ev)
    {
        await JSRuntime.InvokeVoidAsync("util.matchHeightToWidth", "roundme-embedded");
        InitRoundme = true;
        base.StateHasChanged();
    }



    private async void OnClickHotspot(int roomID)
    {
        Data.HouseType.Image oldImage = this.SelectedImage;
        this.SelectedImage = this.HouseData.Images[roomID];
        this.SelectedType = this.SelectedImage.Type;
        base.StateHasChanged();

        await JSRuntime.InvokeVoidAsync("interior.changeRoom", oldImage, this.SelectedImage);
    }

    private void OnClickClose(MouseEventArgs ev)
    {
        ShowFullscreenImage = false;
        base.StateHasChanged();
    }




    public async void StaticChangeRoomClick(int ind)
    {
        Data.HouseType.Image oldImage = SelectedImage;
        SelectedImage = HouseData.Images[ind];
        SelectedType = SelectedImage.Type;
        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("interior.changeRoom", oldImage, SelectedImage);
    }


    private async void ChangeFloor(int floor)
    {
        Floor = floor;
        base.StateHasChanged();

        await JSRuntime.InvokeVoidAsync("mapster_responsive.changeImage", floor);
        await JSRuntime.InvokeVoidAsync("mapster_responsive.resize");
    }

    public void Dispose()
    {
        if (!firstRenderDone)
            return;

        DisposeAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("mapster.dispose");
        await JSRuntime.InvokeVoidAsync("mapster_responsive.dispose");
        await JSRuntime.InvokeVoidAsync("interior.dispose");
        //await JSRuntime.InvokeVoidAsync("pan_viewer.dispose");
    }
}

<style>

    .hideit{
        display:none;
    }

    .rightbutton-div{
        width:50%;
        position:absolute;
        bottom:10px;
        right:7px;
    }

    .bofakta-link {
        color: #415965;
        text-decoration:underline;
        font-size: 0.8vw;

    }


    .infodiv {
        width: 100%;
        padding: 15px;
        flex-wrap: wrap;
        flex-direction: row;
        display: flex;

    }

    .textitem{
        width:35%;
        height:20%;
    }

    .textitem2 {
        width: 35%;
        height: 20%;
    }

    .containerbig{
        display:flex;
        flex-wrap:wrap;
        flex-direction:row;
        justify-content:center;
    }


        .iframe-container iframe {

            width: 100%;
        }
    .rightbutton{
        float: right;

        background-color:darkorange !important;
    }

    #fullscreen-image {
        position: absolute;
        width: 100%;
        left: 0px;
        top: 0px;
        z-index: 18;
    }

    .fs-bg {
        position: absolute;
        width: 100%;
        left: 0px;
        top: 0px;
        background: rgba(32, 32, 32, 0.3);
    }

    .fs-border {
        position: relative;
        width: 90%;
        margin: auto;
        top: 87px;
        border: 5px solid #fafafa;
        border-radius: 11px;
        box-shadow: 0 0px 8px 0 rgba(0, 0, 0, 0.2), 0 0px 20px 0 rgba(0, 0, 0, 0.19);
    }

    .fs-close {
        position: absolute;
        top: -17px;
        right: -17px;
        background: #415965;

        width: 25px;
        height: 25px;
        border-radius: 5px;
        box-shadow: inset 0 0 9px rgba(16, 16, 16, 0.35);
    }
    .fs-close:hover {
        cursor: pointer;
    }
    .fs-close:before, .fs-close:after {
        content: '';
        height: 25px;
        border-left: 2px solid white;
        position: absolute;
        left: 12px;
    }
    .fs-close:after {
        transform: rotate(45deg);
    }
    .fs-close:before {
        transform: rotate(-45deg);
    }

    .e-checkbox-wrapper .e-frame{
        border:none;
    }

    .e-checkicon {
        height: 40px;
        width: 40px;
        display:none;

    }

    .e-btn {
        background-color: #415965;
        color: white;
    }

    .e-checkbox-wrapper .e-frame::before {
        content: '\e78c';
        font-size: 35px;
        color: white;
        background-color: #F9B256;
        border-color: none;
        outline: none;
        height: 40px;
        width: 40px;
    }

    .e-checkicon.e-checkbox-wrapper .e-frame.e-check::before {
        content: '\e799';
        height: 40px;
        width: 40px;

    }

    .e-checkicon.e-checkbox-wrapper .e-check {
        font-size: 35px;
    }


    .btn-group button {
        color: #415965;
        cursor: pointer;
        float: right;
        width: 100%;
        -webkit-tap-highlight-color: transparent;
        background-color: #fff;
        border: 1px none #000;
        box-shadow: 0 2px 3px 0 rgba(0, 0, 0, 0.16);
        outline: none;
    }

    /* Clear floats (clearfix hack) */
    .btn-group:after {
        content: "";
        clear: both;
        display: table;
    }

    .btn-group button:hover {
        background: #415965;
        color: white;
      
    }

    .btn-group button:focus {
        background: #415965;
        color: white;
       
    }

    .e-chip-list.e-chip, .e-chip-list .e-chip {
        border-radius: 3px;
        background-color: #fafafa;
        color: #415965;
        font-family: acumin-pro,sans-serif;
        padding: 7px;
    }

    .e-card {
        font-family: acumin-pro,sans-serif;
    }

    .italicfont {
        font-family: acumin-pro,sans-serif;
        font-size: 12px;
        font-style: italic;
        text-size-adjust: none;
    }

    .line-1 {
        width: 8.33%;
    }

    .last {
        margin-right: initial;
    }

    .line-2 {
        width: 16.66%;
    }

    .line-3 {
        width: 25%;
    }

    .line-4 {
        width: 33.33%;
    }

    .arkitekt {
        padding-top: 14px;
    }

    .line-5 {
        width: 41.66%;
    }

    .line-6 {
        width: 50%;
    }

    .line-7 {
        width: 60%;
    }

    .line-8 {
        width: 66.66%;
    }

    .line-9 {
        width: 75%;
    }

    .line-10 {
        width: 83.33%;
    }

    .line-11 {
        width: 91.66%;
    }

    .line-12 {
        width: 100%;
    }

    [class*="line-"] {
        float: left;
        padding: 7px;

    }

    .gallercontain {
        float: left;
        padding: 4px;
        width: 100%;
        overflow: hidden;
        margin-bottom:4px;
    }

    .floorplancontain {
        float: left;
        padding: 7px;
        width: 100%;
    }

    .infocontain {

        padding: 7px;
        width: 100%;

    }

    #slideshow {
        float: left;
        width: 100%;
        height: auto;
        transition-duration: 0.15s;
    }

    #slideshow.full {
        width: 100%;
        transition-duration: 0.45s;
    }

    canvas {
        margin: auto;
        width: 100%;
    }

    #pan_container {
        width: 100%;
    }

    #pan_container.fullscreen {
        position: absolute;
        left: 0px;
        top: 0px;
        z-index: 100000;
    }

    #pan_fullscreen-btn {
        position: absolute;
        right: 5px;
        bottom: 5px;

    }
    #pan_fullscreen-btn:hover {
        cursor: pointer;
    }
    #pan_fullscreen-btn::before {
        content: '';
        background-image: url(IMG/icons/pan/fullscreen_on_icon.png);
        width: 48px;
        height: 48px;
        background-size: 48px 48px;
        display: inline-block;
        filter: brightness(45%) sepia(1) saturate(10000%) hue-rotate(183deg);

    }

    .pan_el.fullscreen {
        position: absolute;
        right: 0px;
        top: 0px;
        z-index: 110000;
        width: 20%;
    }

    .planritning.pan_el.fullscreen {
        @MinimapHide
    }

    .e-checkicon.pan_el.fullscreen {
        @MoveIcon
        z-index: 110000;
        display:initial;
    }

    #housing_info {
        float: right;
        width: 33%;
        font-family: acumin-pro,sans-serif;
        transition: width 0.1s 0.5s, opacity 0.4s 0.5s, display 0.5s 0.5s;
        @*transition-duration: 0.35s;*@
        @*transition-delay: 0.25s;*@
    }

    #housing_info.hidden {
        display: none;
        width: 25%;
        opacity: 0;
        @*transition-duration: 0.05s;
        transition-delay: 0s;*@
    }

    #gallery {
        padding: 7px;
        overflow-y: hidden;
        overflow-x: visible;
        white-space: nowrap;
        display: flex;
        flex-direction: row;

    }

        #gallery span {
            display: contents;

        }


    #hide_info {
        position: fixed;
        bottom: 0px;
        right: 0px;
        transition-duration: 0.4s;
    }

    #hide_info:hover {
        width: 50px;
    }

    .gallery-img {
        width: 25%;
        padding: 7px;
        filter: brightness(120%);
        transition-property: filter;
        transition-duration: 0.25s;
        -webkit-tap-highlight-color: transparent;
        background-color: #fff;
        border: 1px none #000;
        box-shadow: 0 2px 3px 0 rgba(0, 0, 0, 0.16);
        color: rgba(0, 0, 0, 0.87);
        outline: none;
        margin-right: 4px;
        align-self: center;
    }

    .gallery-img:hover {
        filter: brightness(100%);
        cursor: pointer;
    }

    .gallery-img.active {
        filter: brightness(100%);
    }

    .card-info-header {
        font-family: acumin-pro,sans-serif;
        font-size: 0.8vw;
    }

    .card-info-text {
        font-family: acumin-pro,sans-serif;
        font-size: 12px;
        display: inline-block;
        text-size-adjust: none;
    }

    .card-info-header-fat {
        font-family: acumin-pro,sans-serif;
        font-size: 0.8vw;
        font-weight: 700;

    }

    .list1 {
        list-style-type: none;
    }

    e-info-icon::before {
        content: url(IMG/icons/info_tiny.png);
    }

    .icon {
        width: 32px;
    }

    .e-btn{
        font-size:1vw;
        text-transform:none;
    }

    @@media (max-width: 1467px) {
        .arkitekt {
            width: 100%;
        }
    }

    @@media (max-width: 1379px){



        .textitem {
            width: 21%;
            height: 27%;
        }

        .textitem2 {
            width: 21%;
            height:27%;

            margin-left: 20px;
        }

        .infodiv {
            padding: 7px;
            justify-content: center;
        }



        #gallery{
            padding-top:0px;
        }

    }



    @@media (max-width: 1300px) {

        .textitem {
            width: 21%;
        }

        .textitem2 {
            width: 21%;
            margin-left: 20px;
        }

        .infodiv{
            padding:2px;
        }


    }

    @@media (max-width: 927px) {
        .e-btn {
            background-color: #415965;
            color: white;
            font-size: 12px;
        }
            .e-btn.e-primary {
                margin-top: 7px;
            }


        #gallery {
            width: 25%;
            overflow-y: visible;
            overflow-x: hidden;
            white-space: nowrap;
            flex-direction: column;
        }

        #gallery span {
            display: initial;
        }

        .gallery-img {
            width: 100%;
            padding: 0px;
        }

        .card-info-header-fat {
            font-family: acumin-pro,sans-serif;
            font-size: 2vw;
            float: right;
            display: inline-block;
            padding-bottom:0px;
        }


        .card-info-header {
            font-family: acumin-pro,sans-serif;
            font-size: 2vw;
            display: inline-block;

        }



        .line-1 {
            width: 25%;
        }

        .line-2 {
            width: 100%;
        }

        .line-3 {
            width: 100%;
        }

        .line-4 {
            width: 100%;
        }

        .arkitekt {
            width: 100%;
            padding-top: 6px;
        }

        .planritning {
            width: 75%;
        }

        .line-5 {
            width: 50%;
        }

        .line-6 {
            width: 50%;
        }

        .line-7 {
            width: 100%;
        }

        .line-8 {
            width: 100%;
        }

        .line-9 {
            width: 100%;
        }

        .line-10 {
            width: 100%;
        }

        .line-11 {
            width: 100%;
        }

        .line-12 {
            width: 100%;
        }

        [class*="line-"] {
            float: left;
            padding: 3px;
        }

        .gallercontain{
          width:  25%;
        }

        .floorplancontain {
            width: 75%
        }

        .infocontain{
           width:100%

        }

        .bofakta-link {

            margin-left:-1.5%;
        }

        /* width */
        ::-webkit-scrollbar {
            height: 0px;
            width: 4px;
        }

        #pan_container.fullscreen {
            position: absolute;
            left: 0px;
            top: 0px;
            z-index: 100000;
        }

        .pan_el.fullscreen {
            position: absolute;
            right: 0px;
            top: 0px;
            z-index: 110000;
            width: 40%;
            font-size: 8px;

        }

        .btn-group button {

            cursor: pointer;
            float: right;
            width: 100%;
            border-radius: 2px;
            font-size: 9px;
            padding:0px;
        }

        .e-checkicon {
            height: 20px;
            width: 20px;
            display: none;
        }

        .e-checkbox-wrapper .e-frame::before {
            content: '\e78c';
            font-size: 20px;
            color: white;
            background-color: #F9B256;
            border-color: none;
            outline: none;
            height: 20px;
            width: 20px;
        }

        .e-checkicon.e-checkbox-wrapper .e-frame.e-check::before {
            content: '\e799';
            height: 20px;
            width: 20px;
        }

        .e-checkicon.e-checkbox-wrapper .e-check {
            font-size: 17px;
        }
        .e-checkicon.pan_el.fullscreen {
        @MoveIcon2
        z-index: 110000;
        display:initial;
    }

    }
</style>
