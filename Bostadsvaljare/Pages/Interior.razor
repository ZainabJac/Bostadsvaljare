@page "/interior"
@*@page "/interior/{Housing}"*@

@implements IDisposable
@inject IJSRuntime JSRuntime

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards


<meta name="viewport" content="width=device-width, initial-scale=1.0">
<div class="line-8">
    <!-- Stillbilder -->
    <div id="slideshow" class="@(ShowInfo ? "" : "full") @(SelectedType == ImageType.Image ? "" : "hidden")">
        <div id="gallery-carousel" class="carousel slide" data-ride="carousel">
            <ol class="carousel-indicators">
                @for (int i = 0; i < items.Count; i++) {
                    if (items[i].ImgType != ImageType.Image)
                        continue;

                    <li data-target="#gallery-carousel" data-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
                }
            </ol>
            <div class="carousel-inner">
                @for (int i = 0; i < items.Count; i++) {
                    if (items[i].ImgType != ImageType.Image)
                        continue;

                    <div class="carousel-item @(i == 0 ? "active" : "")">
                        <img class="d-block w-100" src="@items[i].Source" alt="@items[i].Alt">
                    </div>
                }
            </div>
            <a class="carousel-control-prev" href="#gallery-carousel" role="button" data-slide="prev">
                <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                <span class="sr-only">Previous</span>
            </a>
            <a class="carousel-control-next" href="#gallery-carousel" role="button" data-slide="next">
                <span class="carousel-control-next-icon" aria-hidden="true"></span>
                <span class="sr-only">Next</span>
            </a>
        </div>
    </div>

    <!-- 360-bilder -->
    <div id="pan_container" class="select-none @(SelectedType == ImageType.Panorama ? "" : "hidden")"></div>

    <!-- VR-video -->
    <iframe id="vr_video" src="@SelectedImage.Link" class=" @(SelectedType == ImageType.VR ? "" : "hidden")" style="width: 100%;" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" align="middle" allowfullscreen @onload="OnLoadVR"></iframe>
</div>

<div class="line-4-planritning">
    <div id="housing_info" class="@(ShowInfo ? "" : "hidden")"></div>
    <BSImage src="IMG/Imagemapbild.jpg" alt="Housing image" Class="planritning" />
</div>

<div id="gallery" class="line-4">
    @for (int i = 0; i < items.Count; i++) {
        <span class="line-3">
            <BSImage index="@i" src="@items[i].Source" Class="gallery-img" @onclick="OnClickGalleryImg"></BSImage>
        </span>
    }
</div>

<div class="line-4">
    <div>
        <SfCard>
            <CardStacked>

                <div>
                    <text class="card-info-header" style="margin-left:6px;">Pris </text>
                    <text class="card-info-header-right" style="margin-right:6px;">@house1.Price</text>
                </div>

                <div>
                    <text class="card-info-header" style="margin-left:6px;">Boarea</text>
                    <text class="card-info-header-right" style="margin-right:6px;">@house1.Sqm</text>
                </div>


                <div>
                    <text class="card-info-header" style="margin-left:6px;">Lgh nr.</text>
                    <text class="card-info-header-right" style="margin-right:6px;">@house1.HouseNumber</text>
                </div>

                <div>
                    <div style="float:left; margin-left:6px; margin-bottom: 6px; display:inline-block;">
                        <SfButton> Bofaktablad </SfButton>
                    </div>

                    <div style="float:right; margin-right: 6px; margin-bottom: 6px; display:inline-block;">
                        <SfButton IsPrimary="true"> Anmäl intresse </SfButton>
                    </div>
                </div>

            </CardStacked>
        </SfCard>
    </div>

    <div class="arkitekt">

        <SfCard ID="ArkitektenHarOrdet">
            <CardStacked>
                <text class="card-info-header" style="margin-left:6px;">Arkitekten har ordet</text>
                <text class="italicfont" style="margin-left:6px;">"@house1.Comments" </text>
            </CardStacked>
        </SfCard>

    </div>
</div>

@*<div class="line-2knapp">


        <div>
            <div> <SfButton> Bofaktablad </SfButton> </div>
        </div>
    </div>
    <div class="line-2knapp">

        <div>
            <SfButton IsPrimary="true"> Anmäl intresse </SfButton>

        </div>
    </div>*@


@*<BSImage id="hide_info" src="IMG/icons/info.png" Class="icon" @onclick="ToggleInfo" />*@
@*<SfButton id="hide_info" CssClass="e-round" IconCss="icon e-icons e-info-icon" />*@

@*<SfGrid DataSource="@Orders" AllowFiltering="true" AllowPaging="true">
        <GridColumns>
            <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
            <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="150"></GridColumn>
            <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
            <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
        </GridColumns>
    </SfGrid>*@


@code {
    public enum ImageType
    {
        Image,
        Panorama,
        VR
    }

    public class Houses
    {
        public string Sqm { get; set; }
        public string Price { get; set; }
        public string LandArea { get; set; }
        public string HouseNumber { get; set; }
        public string Status { get; set; }
        public string Comments { get; set; }
    }

    public class Item
    {
        public string Source { get; set; }
        public string Alt { get; set; }
        public ImageType ImgType { get; set; }
        public string Link { get; set; }
    }

    public class Order
    {
        public int? OrderID { get; set; }
        public string CustomerID { get; set; }
        public DateTime? OrderDate { get; set; }
        public double? Freight { get; set; }
    }


    private Houses house1 = new Houses
    {
        Sqm = "152m²",
        Price = "5 000 000",

        HouseNumber = "7a",
        Status = "Ledig",
        Comments = "Med sin kubistiska utformning och minimalistiska formspråk sticker lägenheten ut från mängden. Här är det de anspråkslösa detaljerna som väcker intresset. Det stilrent takade entrépartiet följs upp invändigt av ett effektfullt ljusschakt med full takhöjd genom båda våningsplanen och ett högt glasparti."
    };

    private IList<Item> items = new List<Item> {
        new Item {
            Source = "IMG/soffavinkel1.jpg",
            Alt ="First Slide",
            ImgType = ImageType.Image
        },
        new Item {
            Source = "IMG/Köksbild.jpg",
            Alt ="Second Slide",
            ImgType = ImageType.Image
        },
        new Item {
            Source = "IMG/soffavinkel2.jpg",
            Alt ="Third Slide",
            ImgType = ImageType.Image
        },
        new Item {
            Source = "IMG/soffavinkel3.jpg",
            Alt ="Fourth Slide",
            ImgType = ImageType.VR,
            Link = "https://player.vimeo.com/video/393178231"
        },
        new Item {
            Source = "IMG/soffavinkel1.jpg",
            Alt ="Fifth Slide",
            ImgType = ImageType.Panorama,
            Link = "apt_data"
        }
    };

    [Parameter]
    public string Housing { get; set; }
    [Parameter]
    public List<Order> Orders { get; set; }
    [Parameter]
    public bool ShowInfo { get; set; }
    [Parameter]
    public Item SelectedImage { get; set; }
    [Parameter]
    public ImageType SelectedType { get; set; }

    private void ToggleInfo()
    {
        ShowInfo = !ShowInfo;
    }

    protected override async void OnInitialized()
    {
        base.OnInitialized();
        SelectedImage = items[0];
        ShowInfo = true;
        await JSRuntime.InvokeVoidAsync("pan_viewer.init");
        await JSRuntime.InvokeVoidAsync("interior.addResizeListener");
        await JSRuntime.InvokeVoidAsync("interior.onResize", null);

        Orders = Enumerable.Range(1, 75).Select(x => new Order()
        {
            OrderID = 1000 + x,
            CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
            Freight = 2.1 * x,
            OrderDate = (new DateTime[] { new DateTime(2010, 5, 1), new DateTime(2010, 5, 2), new DateTime(2010, 5, 3), })[new Random().Next(3)],
        }).ToList();
    }

    private async void OnClickGalleryImg(MouseEventArgs ev)
    {
        int ind = await JSRuntime.InvokeAsync<int>("util.getGalleryIndex");

        SelectedImage = items[ind];
        SelectedType = SelectedImage.ImgType;
        base.StateHasChanged();

        await JSRuntime.InvokeVoidAsync("pan_viewer.dispose");
        if (items[ind].ImgType == ImageType.Image)
            await JSRuntime.InvokeVoidAsync("bstrap.carousel_changeImage", ind);
        else if (items[ind].ImgType == ImageType.Panorama) {
            //await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("pan_viewer.start", SelectedImage.Link);
        }
    }

    private async void OnLoadVR(ProgressEventArgs ev)
    {
        // Change height on #vr_video to be its width*2/3
        await JSRuntime.InvokeVoidAsync("util.matchHeightToWidth", "vr_video");
    }

    public async void Dispose()
    {
        await JSRuntime.InvokeVoidAsync("interior.dispose");
    }
}

<style>
    .italicfont {
        font-family: 'Segoe UI';
        font-size: 12px;
        font-style: italic;
        text-size-adjust: none;
    }

    .line-1 {
        width: 8.33%;
    }

    .last {
        margin-right: initial;
    }

    .line-2 {
        width: 16.66%;
    }

    .line-3 {
        width: 25%;
    }

    .line-4 {
        width: 33.33%;
    }

    .line-4-planritning {
        width: 33.33%;
    }

    .arkitekt {
        padding-top: 14px;
    }

    .line-5 {
        width: 41.66%;
    }

    .line-6 {
        width: 50%;
    }

    .line-7 {
        width: 58.33%;
    }

    .line-8 {
        width: 66.66%;
    }

    .line-9 {
        width: 75%;
    }

    .line-10 {
        width: 83.33%;
    }

    .line-11 {
        width: 91.66%;
    }

    .line-12 {
        width: 100%;
    }

    [class*="line-"] {
        float: left;
        padding: 7px;

    }

    #slideshow {
        float: left;
        width: 100%;
        height: auto;

        transition-duration: 0.15s;
    }

    #slideshow.full {
        width: 100%;
        transition-duration: 0.45s;
    }

    #housing_info {
        float: right;
        width: 33%;

        font-family: 'Segoe UI';
        transition: width 0.1s 0.5s, opacity 0.4s 0.5s, display 0.5s 0.5s;
        @*transition-duration: 0.35s;*@
        @*transition-delay: 0.25s;*@

    }

    #housing_info.hidden {
        display: none;
        width: 25%;
        opacity: 0;
        @*transition-duration: 0.05s;
        transition-delay: 0s;*@
    }

    #gallery {
        padding: 0px;
        overflow-y: hidden;
        overflow-x: auto;
        white-space: nowrap;
    }

    #gallery span {
        display: contents;
    }

    #hide_info {
        position: fixed;
        bottom: 0px;
        right: 0px;
        transition-duration: 0.4s;
    }

    #hide_info:hover {
        width: 50px;
    }

    .gallery-img {
        width: 25%;
        padding: 7px;
        filter: brightness(120%);
        transition-property: filter;
        transition-duration: 0.25s;
    }

    .gallery-img:hover {
        filter: brightness(100%);
        cursor: pointer;
    }

    .gallery-img.active {
        filter: brightness(100%);
    }

    .card-info-header {
        font-family: 'Segoe UI';
        font-size: 18px;
        display: inline-block;
        text-size-adjust: none;
    }

    .card-info-text {
        font-family: 'Segoe UI';
        font-size: 12px;
        display: inline-block;
        text-size-adjust: none;
    }

    .card-info-header-right {
        font-family: 'Segoe UI';
        font-size: 18px;
        display: inline-block;
        float: right;
        text-size-adjust: none;
    }

    .list1 {
        list-style-type: none;
    }

    e-info-icon::before {
        content: url(IMG/icons/info_tiny.png);
    }

    .icon {
        width: 32px;
    }

    .planritning {
        width: 100%;
    }

    @@media (max-width: 1467px) {
        .arkitekt {
            width: 100%;
        }
    }

    @@media (max-width: 927px) {

        #gallery {
            width: 25%;
            /*height: height(line-4-planritning) + 6px*/
            overflow-y: auto;
            overflow-x: hidden;
        }

        #gallery span {
            display: initial;
        }

        .gallery-img {
            width: 100%;
            padding: 0px;
        }

        .card-info-header-right {
            font-family: 'Segoe UI';
            font-size: 14px;
            float: right;
            display: inline-block;
        }


        .card-info-header {
            font-family: 'Segoe UI';
            font-size: 14px;
            display: inline-block;
            Margin: 4px;
        }


        .card-info-text {
            font-family: 'Segoe UI';
            font-size: 10px;
            display: inline-block;
        }


        .line-1 {
            width: 25%;
        }

        .line-2 {
            width: 100%;
        }

        .line-2knapp {
            width: 50%;
            margin: auto;
        }

        .line-3 {
            width: 100%;
        }

        .line-4 {
            width: 100%;
        }

        .arkitekt {
            width: 100%;
            padding-top: 6px;
        }

        .line-4-planritning {
            width: 75%;
        }

        .line-5 {
            width: 50%;
        }

        .line-6 {
            width: 50%;
        }

        .line-7 {
            width: 100%;
        }

        .line-8 {
            width: 100%;
        }

        .line-9 {
            width: 100%;
        }

        .line-10 {
            width: 100%;
        }

        .line-11 {
            width: 100%;
        }

        .line-12 {
            width: 100%;
        }

        [class*="line-"] {
            float: left;
            padding: 3px;
        }
    }
</style>
