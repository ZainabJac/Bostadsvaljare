@*@page "/interior"*@
@page "/interior/{HouseID}"

@implements IDisposable
@inject IJSRuntime JSRuntime

@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using BlazorPro.Spinkit


<SpinLoader IsLoading="@(SelectedImage == null)">
    <LoadingTemplate>
        <div style="text-align:center; padding-top:18%;">
            <span class="loader"><span class="loader-inner"></span></span> <text style="color:#415965; font-weight:bold; font-family:acumin-pro,sans-serif;"> Loading.. </text>
            <Plane Center="true" />
        </div>
    </LoadingTemplate>
    <ContentTemplate>

        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <div class="line-8">
            <!-- Stillbilder -->
            <div id="slideshow" class="@(ShowInfo ? "" : "full") @(SelectedType == Bostadsvaljare.Data.ImageType.Image ? "" : "hidden")">
                <div id="gallery-carousel" class="carousel slide" data-ride="carousel">
                    <ol class="carousel-indicators">
                        @for (int i = 0; i < Data.Images.Count; i++)
                        {
                            if (Data.Images[i].Type != Bostadsvaljare.Data.ImageType.Image)
                                continue;

                            <li data-target="#gallery-carousel" data-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
                        }
                    </ol>
                    <div class="carousel-inner">
                        @for (int i = 0; i <Data.Images.Count; i++)
                        {
                            if (Data.Images[i].Type != Bostadsvaljare.Data.ImageType.Image)
                                continue;

                            <div class="carousel-item @(i == 0 ? "active" : "")">
                                <img class="d-block w-100" src="@Data.Images[i].Source">
                            </div>
                        }
                    </div>
                    <a class="carousel-control-prev" href="#gallery-carousel" role="button" data-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="carousel-control-next" href="#gallery-carousel" role="button" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
            </div>

            <!-- 360-bilder -->
            <div id="pan_container" class="select-none @(SelectedType == Bostadsvaljare.Data.ImageType.Panorama ? "" : "hidden")"></div>

            <!-- VR-video -->
            <iframe id="vr_video" src="@SelectedImage.Link" class="@(SelectedType == Bostadsvaljare.Data.ImageType.VR ? "" : "hidden")" style="width: 100%;" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" align="middle" allowfullscreen @onload="OnLoadVR"></iframe>
        </div>

        <div class="line-4-planritning">
            @*<div id="housing_info" class="@(ShowInfo ? "" : "hidden")"></div>
        <BSImage src="IMG/Imagemapbild.jpg" alt="Housing image" Class="planritning" />*@
            
            <div id="floorplan-main">



                <img id="floorplan-img" style="width: @ImgWidth;" src="@Data.Floorplans[Floor]" class="center" usemap="#floorplan-im" @onload="OnLoadIM">
                <map id="floorplan-im" name="floorplan-im">
                    <area id="interior" status="" href="#" @onclick="@(() =>OnClickImgagemap(1))" coords="994,850,662,848,657,553,939,557,943,596,992,595,993,760,992,810" shape="poly">
                    <area id="interior2" status="" href="#" @onclick="@(() =>OnClickImgagemap(2))" coords="931,386,470,387,473,175,934,172" shape="poly">
                    <area id="interior" status="" href="#" @onclick="@(() =>OnClickImgagemap(0))" coords="1369,619,999,610,999,400,1366,394" shape="poly">
                </map>
            </div>
            <div class="btn-group">
                <button  class="BtnInbtngrp" @onclick="@(() =>OnClickImgagemap(1))">Plan 1</button>
                <button class="BtnInbtngrp" @onclick="@(() =>OnClickImgagemap(0))">Plan 2</button>
                <button class="BtnInbtngrp" @onclick="@(() =>OnClickImgagemap(2))">Plan 3</button>
            </div>
        </div>

        <div id="gallery" class="line-4">
            @for (int i = 0; i < Data.Images.Count; i++)
            {
                <span class="line-3">
                    <BSImage index="@i" src="@Data.Images[i].Source" Class="gallery-img" @onclick="OnClickGalleryImg"></BSImage>
                </span>
            }
        </div>

        <div class="line-4">
            <div>
                <SfCard>
                    <CardStacked>

                        <div>
                            <text class="card-info-header" style="margin-left:6px;">Pris </text>
                            <text class="card-info-header-right" style="margin-right:6px;">@House.Price</text>
                        </div>

                        <div>
                            <text class="card-info-header" style="margin-left:6px;">Boarea</text>
                            <text class="card-info-header-right" style="margin-right:6px;">@House.Sqm</text>
                        </div>


                        <div>
                            <text class="card-info-header" style="margin-left:6px;">Lgh nr.</text>
                            <text class="card-info-header-right" style="margin-right:6px;">@House.HouseNumber</text>
                        </div>

                        <div>
                            <div style="float:left; margin-left:6px; margin-bottom: 6px; display:inline-block;">
                                <SfButton> Bofaktablad </SfButton>
                            </div>

                            <div style="float:right; margin-right: 6px; margin-bottom: 6px; display:inline-block;">
                                <SfButton IsPrimary="true"> Anmäl intresse </SfButton>
                            </div>
                        </div>

                    </CardStacked>
                </SfCard>
            </div>

            <div class="arkitekt">

                <SfCard ID="ArkitektenHarOrdet">
                    <CardStacked>
                        <text class="card-info-header" style="margin-left:6px;">Arkitekten har ordet</text>
                        <text class="italicfont" style="margin-left:6px;">"@Data.Comment" </text>
                    </CardStacked>
                </SfCard>

            </div>
        </div>


        @*<div class="line-2knapp">
                <div>
                    <div> <SfButton> Bofaktablad </SfButton> </div>
                </div>
            </div>
            <div class="line-2knapp">
                <div>
                    <SfButton IsPrimary="true"> Anmäl intresse </SfButton>
                </div>
            </div>*@


        @*<BSImage id="hide_info" src="IMG/icons/info.png" Class="icon" @onclick="ToggleInfo" />*@
        @*<SfButton id="hide_info" CssClass="e-round" IconCss="icon e-icons e-info-icon" />*@


        @*<SfGrid DataSource="@Orders" AllowFiltering="true" AllowPaging="true">
                <GridColumns>
                    <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                    <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                </GridColumns>
            </SfGrid>*@

    </ContentTemplate>
</SpinLoader>

@code {

    public class Order
    {
        public int? OrderID { get; set; }
        public string CustomerID { get; set; }
        public DateTime? OrderDate { get; set; }
        public double? Freight { get; set; }
    }

    public Dictionary<string, List<Data.House>> MapData { get; set; }

    [Parameter]
    public string HouseID { get; set; }
    [Parameter]
    public Data.House House { get; set; }
    [Parameter]
    public List<Order> Orders { get; set; }
    [Parameter]
    public bool ShowInfo { get; set; } = true;
    [Parameter]
    public Data.HouseType.Image SelectedImage { get; set; }
    [Parameter]
    public Data.ImageType SelectedType { get; set; }

    private Data.HouseType Data { get; set; }
    private int Floor { get; set; } = 0;
    private string ImgWidth { get; set; } = "100%";
    private bool firstRenderDone = false;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        House = Bostadsvaljare.Data.House.Get(int.Parse(HouseID));
        string houseType = House.Housetype;
        Data = Bostadsvaljare.Data.HouseType.GetData(houseType);
        SelectedImage = Data.Images[0];

        Orders = Enumerable.Range(1, 75).Select(x => new Order()
        {
            OrderID = 1000 + x,
            CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
            Freight = 2.1 * x,
            OrderDate = (new DateTime[] { new DateTime(2010, 5, 1), new DateTime(2010, 5, 2), new DateTime(2010, 5, 3), })[new Random().Next(3)],
        }).ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("mapster_responsive.initialize");
            await JSRuntime.InvokeVoidAsync("interior.addResizeListener");
            await JSRuntime.InvokeVoidAsync("interior.onResize", null);
            firstRenderDone = true;
        }
    }

    public async void OnLoadIM(Microsoft.AspNetCore.Components.Web.ProgressEventArgs args)
    {
        while (!firstRenderDone)
            await Task.Delay(10);

        await JSRuntime.InvokeVoidAsync(
            "mapster_responsive.setValues", 0, "floorplan-main", ImgWidth
        );
        await JSRuntime.InvokeVoidAsync(
            "mapster.addMapHighlights", "floorplan-main", "floorplan-img", "floorplan-im", "", 0.5, 0.65
        );


        base.StateHasChanged();
    }

    private async void OnClickImgagemap(int roomid)
    {
        await JSRuntime.InvokeVoidAsync("pan_viewer.dispose");
        await JSRuntime.InvokeVoidAsync("bstrap.carousel_changeImage", roomid);
    }

    //private async void RoomClicked(int houseID)
    //{
    //    var mobile = await JSRuntime.InvokeAsync<bool>("util.isDevice");
    //    if (mobile && MobileSelection != houseID)
    //    {
    //        MobileSelection = houseID;
    //    }
    //    else
    //    {
    //        await JSRuntime.InvokeVoidAsync("util.hideTooltip");
    //    }
    //}

    private async void OnClickGalleryImg(MouseEventArgs ev)
    {
        int ind = await JSRuntime.InvokeAsync<int>("util.getGalleryIndex");

        Data.ImageType prevType = SelectedType;
        SelectedImage = Data.Images[ind];
        SelectedType = SelectedImage.Type;

        if (prevType == Bostadsvaljare.Data.ImageType.Panorama
        && SelectedType != Bostadsvaljare.Data.ImageType.Panorama)
            await JSRuntime.InvokeVoidAsync("pan_viewer.dispose");

        if (SelectedType == Bostadsvaljare.Data.ImageType.Image)
            await JSRuntime.InvokeVoidAsync("bstrap.carousel_changeImage", ind);
        else if (SelectedType == Bostadsvaljare.Data.ImageType.Panorama)
            await JSRuntime.InvokeVoidAsync("pan_viewer.start", SelectedImage.Link);

        base.StateHasChanged();
    }

    private async void OnLoadVR(ProgressEventArgs ev)
    {
        // Change height on #vr_video to be its width*2/3
        await JSRuntime.InvokeVoidAsync("util.matchHeightToWidth", "vr_video");
    }

    private void ToggleInfo()
    {
        ShowInfo = !ShowInfo;
    }

    public async void Dispose()
    {
        if (!firstRenderDone)
            return;

        await JSRuntime.InvokeVoidAsync("interior.dispose");
        await JSRuntime.InvokeVoidAsync("pan_viewer.dispose");
        await JSRuntime.InvokeVoidAsync("mapster_responsive.dispose");
    }
}

<style>

    .btn-group button {
        background-color: #415965; /* Green background */
        border: 1px solid white; /* Green border */
        color: white; /* White text */
        padding: 10px 10px; /* Some padding */
        cursor: pointer; /* Pointer/hand icon */
        float: left; /* Float the buttons side by side */
    }

    .BtnInbtngrp:active,
    .BtnInbtngrp:focus
    {
        border: 0.2em solid white; /* here configure as your needs */
        color: white;
    }

    /* Clear floats (clearfix hack) */
    .btn-group:after {
        content: "";
        clear: both;
        display: table;
    }


    /* Add a background color on hover */
    .btn-group button:hover {
        background-color: #576f7a;
    }

    .e-chip-list.e-chip, .e-chip-list .e-chip {
        border-radius: 3px;
        background-color: #fafafa;
        color: #415965;
        font-family: acumin-pro,sans-serif;
        padding: 7px;
    }

    .e-card {
        font-family: acumin-pro,sans-serif;
    }

    .italicfont {
        font-family: acumin-pro,sans-serif;
        font-size: 12px;
        font-style: italic;
        text-size-adjust: none;
    }

    .line-1 {
        width: 8.33%;
    }

    .last {
        margin-right: initial;
    }

    .line-2 {
        width: 16.66%;
    }

    .line-3 {
        width: 25%;
    }

    .line-4 {
        width: 33.33%;
    }

    .line-4-planritning {
        width: 33.33%;
    }

    .arkitekt {
        padding-top: 14px;
    }

    .line-5 {
        width: 41.66%;
    }

    .line-6 {
        width: 50%;
    }

    .line-7 {
        width: 58.33%;
    }

    .line-8 {
        width: 66.66%;
    }

    .line-9 {
        width: 75%;
    }

    .line-10 {
        width: 83.33%;
    }

    .line-11 {
        width: 91.66%;
    }

    .line-12 {
        width: 100%;
    }

    [class*="line-"] {
        float: left;
        padding: 7px;
    }

    #slideshow {
        float: left;
        width: 100%;
        height: auto;

        transition-duration: 0.15s;
    }

    #slideshow.full {
        width: 100%;
        transition-duration: 0.45s;
    }

    canvas {
        margin: auto;
        width: 100%;
    }

    #pan_container {
        width: 100%;
    }

    #pan_container.fullscreen {
        position: absolute;
        left: 0px;
        top: 0px;
        z-index: 1000000;
    }

    #housing_info {
        float: right;
        width: 33%;
        font-family: acumin-pro,sans-serif;
        transition: width 0.1s 0.5s, opacity 0.4s 0.5s, display 0.5s 0.5s;
        @*transition-duration: 0.35s;*@
        @*transition-delay: 0.25s;*@
    }

    #housing_info.hidden {
        display: none;
        width: 25%;
        opacity: 0;
        @*transition-duration: 0.05s;
        transition-delay: 0s;*@
    }

    #gallery {
        padding: 0px;
        overflow-y: hidden;
        overflow-x: auto;
        white-space: nowrap;
    }

    #gallery span {
        display: contents;
    }

    #hide_info {
        position: fixed;
        bottom: 0px;
        right: 0px;
        transition-duration: 0.4s;
    }

    #hide_info:hover {
        width: 50px;
    }

    .gallery-img {
        width: 25%;
        padding: 7px;
        filter: brightness(120%);
        transition-property: filter;
        transition-duration: 0.25s;
    }

    .gallery-img:hover {
        filter: brightness(100%);
        cursor: pointer;
    }

    .gallery-img.active {
        filter: brightness(100%);
    }

    .card-info-header {
        font-family: acumin-pro,sans-serif;
        font-size: 18px;
        display: inline-block;
        text-size-adjust: none;
    }

    .card-info-text {
        font-family: acumin-pro,sans-serif;
        font-size: 12px;
        display: inline-block;
        text-size-adjust: none;
    }

    .card-info-header-right {
        font-family: acumin-pro,sans-serif;
        font-size: 18px;
        display: inline-block;
        float: right;
        text-size-adjust: none;
    }

    .list1 {
        list-style-type: none;
    }

    e-info-icon::before {
        content: url(IMG/icons/info_tiny.png);
    }

    .icon {
        width: 32px;
    }

    .planritning {
        width: 100%;
    }

    @@media (max-width: 1467px) {
        .arkitekt {
            width: 100%;
        }
    }

    @@media (max-width: 927px) {

        #gallery {
            width: 25%;
            /*height: height(line-4-planritning) + 6px*/
            overflow-y: auto;
            overflow-x: hidden;
        }

        #gallery span {
            display: initial;
        }

        .gallery-img {
            width: 100%;
            padding: 0px;
        }

        .card-info-header-right {
            font-family: acumin-pro,sans-serif;
            font-size: 14px;
            float: right;
            display: inline-block;
        }


        .card-info-header {
            font-family: acumin-pro,sans-serif;
            font-size: 14px;
            display: inline-block;
            Margin: 4px;
        }


        .card-info-text {
            font-family: acumin-pro,sans-serif;
            font-size: 10px;
            display: inline-block;
        }


        .line-1 {
            width: 25%;
        }

        .line-2 {
            width: 100%;
        }

        .line-2knapp {
            width: 50%;
            margin: auto;
        }

        .line-3 {
            width: 100%;
        }

        .line-4 {
            width: 100%;
        }

        .arkitekt {
            width: 100%;
            padding-top: 6px;
        }

        .line-4-planritning {
            width: 75%;
        }

        .line-5 {
            width: 50%;
        }

        .line-6 {
            width: 50%;
        }

        .line-7 {
            width: 100%;
        }

        .line-8 {
            width: 100%;
        }

        .line-9 {
            width: 100%;
        }

        .line-10 {
            width: 100%;
        }

        .line-11 {
            width: 100%;
        }

        .line-12 {
            width: 100%;
        }

        [class*="line-"] {
            float: left;
            padding: 3px;
        }

        /* width */
        ::-webkit-scrollbar {
            height: 0px;
            width: 4px;
        }
    }
</style>
