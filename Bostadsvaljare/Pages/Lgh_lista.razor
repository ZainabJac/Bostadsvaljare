@page "/lgh_lista"

@using BlazorStrap
@using Syncfusion.Blazor.Grids

@inject IJSRuntime JSRuntime



    <div class="line-6">
        <img src="IMG/Dag.jpg" style="width:100%" />

        <div>
            <div class="line-1-5">  <BSImage src="IMG/imagemap.jpg" class="line-12" style="display:inline-block"></BSImage></div>
            <div class="line-1-5"> <BSImage src="IMG/Dag.jpg" class="line-12" style="display:inline-block"></BSImage></div>
            <div class="line-1-5"> <BSImage src="IMG/ext. 2.jpg" class="line-12" style="display:inline-block"></BSImage></div>
            <div class="line-1-5">  <BSImage src="IMG/Natt.jpg" class="line-12" style="display:inline-block"></BSImage></div>
        </div>
    </div>
<div class="line-6">
    <SfGrid ID="GridResize" @ref="HouseList" DataSource="HouseData" AllowSorting="true" AllowFiltering="true" AllowPaging="true" EnableHover="true" @onmouseover="OnMouseOverGrid" @onmouseout="OnMouseOutGrid">
        <GridEvents Created="Created" DataBound="DataBound" RowSelected="HousingClickedGrid" TValue="House"></GridEvents>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar" Mode="FilterBarMode.Immediate"></GridFilterSettings>
        <GridEvents Created="Created" DataBound="DataBound" RowSelected="HousingClickedGrid" TValue="House"></GridEvents>
        <GridColumns>
            <GridColumn Field="@nameof(House.HouseNumber)" HeaderText="Lgh nr."></GridColumn>
            <GridColumn Field="@nameof(House.Sqm)" HeaderText="Boarea"></GridColumn>
            <GridColumn Field="@nameof(House.Price)" Format="C2" HeaderText="Pris"></GridColumn>
            <GridColumn Field="@nameof(House.Manadsavgift)" Format="C2" HeaderText="Mån. avgift"></GridColumn>
            <GridColumn Field="@nameof(House.Status)" HeaderText="Status" customAttributes=@(new { @class = "e-attr" })>
                <Template>
                    @{
                        House house = (context as House);
                        <div>
                            @if (house.Status == "sold")
                            {
                                <img src="https://upload.wikimedia.org/wikipedia/commons/archive/c/c3/20090215162203%21Location_dot_dark_red.svg"
                                     height="25"
                                     width="25" />
                                <span>Såld</span>
                            }
                            @if (house.Status == "booked")
                            {
                                <img src=" https://upload.wikimedia.org/wikipedia/commons/9/91/Location_dot_orange.svg"
                                     height="25"
                                     width="25" />
                                <span>Reserverad</span>
                            }
                            @if (house.Status == "available")
                            {
                                <img src=" https://upload.wikimedia.org/wikipedia/commons/0/0e/Ski_trail_rating_symbol-green_circle.svg"
                                     height="25"
                                     width="25" />
                                <span>Ledig</span>
                            }
                        </div>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>

@*<div class="line-7"> 
    <img src="IMG/Köksbild.jpg" class="line-12" />
    <div id="house-main">
        <img id="house-main-img" src="IMG/Imagemap.jpg" usemap="#apt-list" @onload="OnLoadImage">
        <map id="apt-list" name="apt-list">
            @foreach (HouseImage image in ImageData)
            {
                <area id="@GetHouseStatus(image.HouseNumber)" href="#"
                      @onmouseover="@(e => OnMouseOverIM(e, image.HouseNumber))" @onmouseout="OnMouseOutIM" @onclick="() => HousingClickedIM(image.HouseNumber)"
                      coords="@image.IMCoords" shape="poly">
            }
        </map>*@











@code{



    private SfGrid<House> HouseList;
    private Dictionary<string, string> HouseToArea;
    private bool IsHighlighting { get; set; }
    private int HighlightedRow { get; set; }

    public List<House> HouseData { get; set; }
    public List<HouseImage> ImageData { get; set; }

    public bool InitialRender = false;

    public void Created()
    {
        InitialRender = true;
        JSRuntime.InvokeAsync<object>("ResizeScript");
    }

    public void DataBound()
    {
        if (InitialRender)     //check for initial render and call the JS method
        {
            InitialRender = false;
            JSRuntime.InvokeAsync<object>("ResizeComplete");
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.HouseData = House.GetHouseData();
        this.ImageData = HouseImage.GetImageData();
        this.HouseToArea = new Dictionary<string, string>();
        this.IsHighlighting = false;
        this.HighlightedRow = -1;
    }


    private async void OnLoadImage(ProgressEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync(
            "mapster.addMapHighlights", "house-main", "house-main-img", "apt-list", ""
        );

        Dictionary<string, int> statuses = new Dictionary<string, int> {
            { "available", 0 },
            { "booked", 0 },
            { "sold", 0 },
        };
        foreach (HouseImage img in ImageData)
        {
            string status = HouseData.Find(x => x.HouseNumber == img.HouseNumber).Status;
            HouseToArea.Add(img.HouseNumber,
                            status + statuses[status]++);
        }
    }

    private string GetHouseStatus(string houseNumber)
    {
        foreach (House house in HouseData)
        {
            if (house.HouseNumber == houseNumber)
                return house.Status;
        }
        return "";
    }

    private void OnMouseOverIM(MouseEventArgs e, string houseNumber)
    {
        ShowTooltip(e.ClientX, e.ClientY, houseNumber);
        HighlightInList(houseNumber);
    }

    private void OnMouseOutIM(MouseEventArgs e)
    {
        if (IsHighlighting)
        {
            HideTooltip();
            RemoveListHighlight();
            IsHighlighting = false;
        }
    }

    private async void OnMouseOverGrid(MouseEventArgs e)
    {
        //BUG: mouseover on image map and then to grid causes the first row not to highlight the corresponding housing on the image map (sometimes... -_-)
        int rowInd = await JSRuntime.InvokeAsync<int>("util.getSFGridRowIndex");
        if (rowInd >= 0 && this.HighlightedRow != rowInd)
        {
            HighlightInImageMap((await this.HouseList.GetCurrentViewRecords())[rowInd].HouseNumber);
            this.HighlightedRow = rowInd;
        }
    }

    private async void OnMouseOutGrid(MouseEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("mapster.deselect");
    }

    private async void HighlightInList(string houseNumber)
    {
        if (await this.HouseList.GetCurrentViewRecords() == null)
            return;

        await this.HouseList.GoToPage(1);
        bool continuePaging = true;

        for (int i = 1; i <= this.HouseList.PageSettings.PageCount; i += 1)
        {
            List<House> page = await this.HouseList.GetCurrentViewRecords();
            for (int j = 0; j < page.Count; j += 1)
            {
                if (page[j].HouseNumber == houseNumber)
                {
                    await this.HouseList.SelectRow(j);
                    continuePaging = false;
                    IsHighlighting = true;
                    break;
                }
            }
            if (continuePaging)
                await this.HouseList.GoToPage(i + 1);
            else
                break;
        }
    }

    private async void RemoveListHighlight()
    {
        await this.HouseList.ClearRowSelection();
    }

    private async void HighlightInImageMap(string houseNumber)
    {
        await JSRuntime.InvokeVoidAsync("mapster.deselect");

        if (HouseToArea.ContainsKey(houseNumber))
        {
            string areaID = HouseToArea[houseNumber];
            await JSRuntime.InvokeVoidAsync("mapster.select", areaID);
        }
    }

    private async void ShowTooltip(double x, double y, string houseNumber)
    {
        string msg;
        House house = null;
        foreach (House h in HouseData)
        {
            if (h.HouseNumber == houseNumber)
            {
                house = h;
                break;
            }
        }

        switch (house.Status)
        {
            case "sold":
                msg = "Såld";
                break;
            case "booked":
                msg = "Reserverad";
                break;
            default:
                msg = "Lgh nr.\t" + houseNumber +
                    "\nBoarea:\t" + house.Sqm + "m²" +
                    "\nPris:\t\t" + house.Price;
                break;
        }

        await JSRuntime.InvokeVoidAsync(
            "util.showTooltip", x, y, msg
        );
    }

    private async void HideTooltip()
    {
        await JSRuntime.InvokeVoidAsync("util.hideTooltip");
    }

    private void HousingClickedIM(string houseNumber)
    {
        //TODO: goto page 'interior' with houseNumber as reference
    }

    public void HousingClickedGrid(RowSelectEventArgs<House> args)
    {
        if (args.IsInteracted)
        {
            //TODO: goto page 'interior' with houseNumber as reference
        }
    }

    public class House
    {
        public double Sqm { get; set; }
        public string Price { get; set; }
        public string Manadsavgift { get; set; }
        public string HouseNumber { get; set; }
        public string Status { get; set; }
        public string IMCoords { get; set; }

        public static List<House> GetHouseData()
        {
            List<House> houseData = new List<House>();
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7a", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "1b", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "3a", Status = "booked" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "4b", Status = "sold" });
            houseData.Add(new House { Sqm = 110, Price = "5 200 000 Kr", Manadsavgift = "5 900 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 120, Price = "5 400 000 Kr", Manadsavgift = "5 400 Kr", HouseNumber = "9b", Status = "sold" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7c", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7b", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "4a", Status = "booked" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8b", Status = "sold" });
            houseData.Add(new House { Sqm = 110, Price = "5 200 000 Kr", Manadsavgift = "5 900 Kr", HouseNumber = "9c", Status = "sold" });
            houseData.Add(new House { Sqm = 120, Price = "5 400 000 Kr", Manadsavgift = "5 400 Kr", HouseNumber = "9d", Status = "sold" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7d", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7b", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8a", Status = "booked" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "9b", Status = "sold" });
            houseData.Add(new House { Sqm = 110, Price = "5 200 000 Kr", Manadsavgift = "5 900 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 120, Price = "5 400 000 Kr", Manadsavgift = "5 400 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7a", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7b", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8a", Status = "booked" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8b", Status = "sold" });
            houseData.Add(new House { Sqm = 110, Price = "5 200 000 Kr", Manadsavgift = "5 900 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 120, Price = "5 400 000 Kr", Manadsavgift = "5 400 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7a", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7b", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8a", Status = "booked" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8b", Status = "sold" });
            houseData.Add(new House { Sqm = 110, Price = "5 200 000 Kr", Manadsavgift = "5 900 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 120, Price = "5 400 000 Kr", Manadsavgift = "5 400 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "10a", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7b", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8a", Status = "booked" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "27b", Status = "sold" });
            houseData.Add(new House { Sqm = 110, Price = "5 200 000 Kr", Manadsavgift = "5 900 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 120, Price = "5 400 000 Kr", Manadsavgift = "5 400 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7a", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7b", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8a", Status = "booked" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8b", Status = "sold" });
            houseData.Add(new House { Sqm = 110, Price = "5 200 000 Kr", Manadsavgift = "5 900 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 120, Price = "5 400 000 Kr", Manadsavgift = "5 400 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7a", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7b", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8a", Status = "booked" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8b", Status = "sold" });
            houseData.Add(new House { Sqm = 110, Price = "5 200 000 Kr", Manadsavgift = "5 900 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 120, Price = "5 400 000 Kr", Manadsavgift = "5 400 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7a", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7b", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8a", Status = "booked" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8b", Status = "sold" });
            houseData.Add(new House { Sqm = 110, Price = "5 200 000 Kr", Manadsavgift = "5 900 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 120, Price = "5 400 000 Kr", Manadsavgift = "5 400 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7a", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "7b", Status = "available" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8a", Status = "booked" });
            houseData.Add(new House { Sqm = 91, Price = "4 700 000 Kr", Manadsavgift = "3 800 Kr", HouseNumber = "8b", Status = "sold" });
            houseData.Add(new House { Sqm = 110, Price = "5 200 000 Kr", Manadsavgift = "5 900 Kr", HouseNumber = "9a", Status = "sold" });
            houseData.Add(new House { Sqm = 120, Price = "5 400 000 Kr", Manadsavgift = "5 400 Kr", HouseNumber = "9a", Status = "sold" });

            return houseData;
        }
    }

    public class HouseImage
    {
        public string HouseNumber { get; set; }
        public string IMCoords { get; set; }

        public static List<HouseImage> GetImageData()
        {
            List<HouseImage> imageData = new List<HouseImage>();
            imageData.Add(new HouseImage { HouseNumber = "7a", IMCoords = "558,130,558,206,550,212,550,272,576,288,578,315,311,322,307,148,556,130" });
            imageData.Add(new HouseImage { HouseNumber = "7b", IMCoords = "311,324,576,315,571,373,551,380,553,400,553,438,571,447,576,461,313,463" });
            imageData.Add(new HouseImage { HouseNumber = "9a", IMCoords = "574,463,574,539,553,542,553,602,578,609,313,604,308,461,463,461" });
            imageData.Add(new HouseImage { HouseNumber = "9b", IMCoords = "313,607,583,611,576,701,551,712,553,766,313,753" });
            imageData.Add(new HouseImage { HouseNumber = "9c", IMCoords = "580,885,576,773,544,764,313,753,311,870,437,879" });
            imageData.Add(new HouseImage { HouseNumber = "8a", IMCoords = "578,90,940,63,942,281,580,290,551,270,551,211,558,128,558,110,574,106" });
            imageData.Add(new HouseImage { HouseNumber = "8b", IMCoords = "578,292,942,279,942,456,576,461,551,436,551,391,553,378,569,371" });
            imageData.Add(new HouseImage { HouseNumber = "1b", IMCoords = "576,463,942,456,942,616,578,611,553,602,553,546,574,537" });
            imageData.Add(new HouseImage { HouseNumber = "3a", IMCoords = "583,613,947,616,944,784,574,771,551,766,551,710,576,699" });
            imageData.Add(new HouseImage { HouseNumber = "4a", IMCoords = "940,63,953,97,1387,70,1389,281,953,292,940,274" });
            imageData.Add(new HouseImage { HouseNumber = "4b", IMCoords = "940,283,953,290,1387,279,1387,458,956,456,944,456" });
            imageData.Add(new HouseImage { HouseNumber = "7c", IMCoords = "942,456,953,458,1389,458,1387,618,956,609,942,607" });
            imageData.Add(new HouseImage { HouseNumber = "7d", IMCoords = "944,609,1387,620,1389,796,944,780" });

            return imageData;
        }
    }
}


<style>


    .e-gridcontent:hover {
        cursor: pointer;
    }


    .e-grid * {
        font-size: 12px !important;
    }

    .e-grid .e-headercell, .e-grid .e-detailheadercell {
        background-color: #415965;
        color: white;
    }

    .e-grid .e-icon-ascending::before, .e-grid-menu .e-icon-ascending::after {
        color: white;
    }

    .e-grid .e-icon-descending::before, .e-grid-menu .e-icon-descending::before {
        color: white;
    }

    .pic-below {
        width: 14.57%;
        float: left;
    }

    .line-1 {
        width: 8.33%;
        padding: 7px;
    }

    .line-1last {
        width: 8.33%;
    }

    .line-1-5 {
        width: 25%;
        padding: 7px;
    }

    .line-2 {
        width: 16.66%;
    }

    .line-3 {
        width: 25%;
    }

    .line-4 {
        width: 33.33%;
    }

    .line-4planritning {
        width: 33.33%;
    }

    .line-4arkitekt {
        width: 33.33%;
        float: left;
        padding: 7px;
    }

    .line-5 {
        width: 41.66%;
    }

    .line-6 {
        width: 50%;
    }

    .line-7 {
        width: 58.33%;
    }

    .line-8 {
        width: 66.66%;
    }

    .line-9 {
        width: 75%;
    }

    .line-10 {
        width: 83.33%;
    }

    .line-11 {
        width: 91.66%;
    }

    .line-12 {
        width: 100%;
    }

    [class*="line-"] {
        float: left;
        padding: 7px;
    }

    @@media (max-width: 1467px) {
        .line-4arkitekt {
            width: 100%;
        }
    }

    @@media (max-width: 927px) {


        .line-1 {
            width: 25%;
        }

        .line-1last {
            display: none
        }

        .line-2 {
            width: 100%;
        }

        .line-2knapp {
            width: 50%;
            margin: auto;
        }

        .line-3 {
            width: 25%;
        }

        .line-4 {
            width: 100%;
        }

        .line-4arkitekt {
            width: 100%;
        }

        .line-4planritning {
            width: 75%;
        }

        .line-5 {
            width: 100%;
        }

        .line-6 {
            width: 50%;
        }

        .line-7 {
            width: 100%;
        }

        .line-8 {
            width: 100%;
        }

        .line-9 {
            width: 100%;
        }

        .line-10 {
            width: 100%;
        }

        .line-11 {
            width: 100%;
        }

        .line-12 {
            width: 100%;
        }

        [class*="line-"] {
            float: left;
            padding: 3px;
        }

        .e-grid * {
            font-size: 10px !important;
        }
    }
</style>
