@page "/lgh_lista"

@using BlazorStrap
@using Syncfusion.Blazor.Grids
@using BlazorPro.Spinkit

@implements IDisposable
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager navManager


<SpinLoader IsLoading="@(MapData  == null || HouseData == null || !ImagesLoaded)">
    <LoadingTemplate>
        <div style="text-align:center; padding-top:18%;">
            <span class="loader"><span class="loader-inner"></span></span> <text style="color:#415965; font-weight:bold; font-family:acumin-pro,sans-serif;"> Loading.. </text>
            <Plane Center="true" />
        </div>
    </LoadingTemplate>
    <ContentTemplate>

        <img src="IMG/pixel.gif" alt="" @onload="OnAfterLoader" style="position: absolute; top: 0px; visibility: hidden;" />


        <div class="line-6" id="gallerybox">
            @for (int i = 0; i < Views.Count; i++)
            {
                var _i = i;
                <div id="@Views[i].ID" style="@(!ViewsInited || CurrentView == _i ? "" : "display: none;") @(ViewsInited ? "" : "visibility: hidden;")">
                    <map id="@Views[i].ImageMapName" name="@Views[i].ImageMapName">
                        @foreach (KeyValuePair<string, List<Data.HouseMap>> view in MapData)
                        {
                            if (view.Key == Data.HouseMap.ImageNameToVariant(Views[i].Source))
                            {
                                @foreach (Data.HouseMap map in view.Value)
                                {
                                    <area id="@Data.House.Get(map.ID).Status" status="" href="#"
                                          @onmouseover="e => OnMouseOverIM(e, map.HouseNumber)" @onmouseout="OnMouseOutIM" @onclick="() => HousingClickedIM(map.ID)"
                                          coords="@map.IMCoords" shape="poly">
                                }
                            }
                        }
                    </map>
                </div>
            }

            <div id="gallery">
                @for (int i = 0; i < Views.Count; i++)
                {
                    <span id="gallery-item-@i" class="line-3">
                    </span>
                }
            </div>
        </div>
        <div class="line-6 container" id="GridResize">
            <div style="width:100%">
                <SfGrid Height="100%" Width="100%" @ref="HouseList" DataSource="HouseData" AllowSorting="true" AllowFiltering="true" AllowPaging="false" EnableHover="true" @onmouseover="OnMouseOverGrid" @onmouseout="OnMouseOutGrid">
                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.FilterBar" Mode="FilterBarMode.Immediate"></GridFilterSettings>
                    <GridEvents Created="Created" DataBound="DataBound" RowSelected="HousingClickedGrid" RowDeselected="HousingClickedTwiceGrid" TValue="Data.House"></GridEvents>
                    <GridColumns>
                        <GridColumn Field="@nameof(Data.House.HouseNumber)" HeaderText="Hus nr."></GridColumn>
                        <GridColumn Field="@nameof(Data.House.Sqm)" HeaderText="Boarea"></GridColumn>
                        <GridColumn Field="@nameof(Data.House.Price)" Format="C2" HeaderText="Pris"></GridColumn>
                        <GridColumn Field="@nameof(Data.House.Status)" HeaderText="Status" customAttributes=@(new { @class = "e-attr" })>
                            <Template>
                                @{
                                    Data.House house = (context as Data.House);
                                    <div>
                                        @if (house.Status == "sold")
                                        {
                                            <img src="/IMG/icons/circlered.png" />
                                            <span>Såld</span>
                                        }
                                        @if (house.Status == "booked")
                                        {
                                            <img src="/IMG/icons/circleOrange.png" />
                                            <span>Reserverad</span>
                                        }
                                        @if (house.Status == "available")
                                        {
                                            <img src="/IMG/icons/CircleGreen.png" />
                                            <span>Ledig</span>
                                        }
                                    </div>
                                }
                            </Template>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        </div>
    </ContentTemplate>
</SpinLoader>


@code{
    public class ViewData
    {
        public string ID { get; set; }
        public string Source { get; set; }
        public string ImageMapName { get; set; }
        public bool Initialized { get; set; } = false;
    }

    private static Lgh_lista self;

    private SfGrid<Data.House> HouseList;
    private Dictionary<string, string> HouseToStatus;
    private bool IsHighlighting { get; set; }
    private int HighlightedRow { get; set; }
    private int MobileSelection { get; set; } = -1;
    private int CurrentView { get; set; } = 0;
    private bool ImagesLoaded { get; set; } = false;
    private bool ViewsInited { get; set; } = false;
    private string MouseOverHouse { get; set; } = "";
    private static string Gridheight { get; set; }

    public List<Data.House> HouseData { get; set; }
    public Dictionary<string, List<Data.HouseMap>> MapData { get; set; }

    private bool InitialRender = false;
    private bool firstRenderDone = false;

    private static string _id = "house-main-";
    private static string _mapName = "house-map-";
    private static int _ind = 0;
    List<ViewData> Views = new List<ViewData> {
        new ViewData {
            ID = _id + _ind,
            Source = "IMG/Ext1-5area.jpg",
            ImageMapName = _mapName + _ind++,
        },
        new ViewData {
            ID = _id + _ind,
            Source = "IMG/Oversikt_V2Optimerad.jpg",
            ImageMapName = _mapName + _ind++,
        },
        new ViewData {
            ID = _id + _ind,
            Source = "IMG/Ext1-5red.jpg",
            ImageMapName = _mapName + _ind++,
        },
        new ViewData {
            ID = _id + _ind,
            Source = "IMG/Ext1-5grey.jpg",
            ImageMapName = _mapName + _ind++,
        },
    };


    public async void Created()
    {
        InitialRender = true;
        await JSRuntime.InvokeVoidAsync("lgh_lista.init");
    }

    public async void DataBound()
    {
        if (InitialRender)
        {     //check for initial render and call the JS method
            InitialRender = false;
            await JSRuntime.InvokeVoidAsync("lgh_lista.resizeComplete");
        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        self = this;
        this.HouseData = Data.House.GetHouseData();
        this.MapData = Data.HouseMap.GetHouseMapData();
        this.HouseToStatus = new Dictionary<string, string>();
        this.IsHighlighting = false;
        this.HighlightedRow = -1;

        foreach (KeyValuePair<string, List<Data.HouseMap>> view in MapData)
        {
            Dictionary<string, int> statuses = new Dictionary<string, int> {
                { "available", 0 },
                { "booked", 0 },
                { "sold", 0 },
            };
            foreach (Data.HouseMap map in view.Value)
            {
                string status = HouseData.Find(x => x.HouseNumber == map.HouseNumber).Status;
                HouseToStatus.Add(view.Key +"_"+ map.HouseNumber,
                                  status + statuses[status]++);
            }
        }


        base.StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("util.disableClickMenu");
            await JSRuntime.InvokeVoidAsync("mapster_responsive.initialize");
            ImagesLoaded = await JSRuntime.InvokeAsync<bool>("lgh_lista.loadImages", Views);
            firstRenderDone = true;
            base.StateHasChanged();
        }

    }

    private async void OnAfterLoader(Microsoft.AspNetCore.Components.Web.ProgressEventArgs ev)
    {
        await JSRuntime.InvokeVoidAsync("util.enableClickMenu");
        await JSRuntime.InvokeVoidAsync("lgh_lista.applyImages");
        ViewsInited = true;
        base.StateHasChanged();
    }

    private async void OnMouseOverIM(MouseEventArgs e, string houseNumber)
    {
        MouseOverHouse = houseNumber;
        await Task.Delay(100);
        if (MouseOverHouse != houseNumber)
            return;

        ShowTooltip(e.ClientX, e.ClientY, houseNumber);
        HighlightInList(houseNumber);

        MouseOverHouse = "";
    }

    private void OnMouseOutIM(MouseEventArgs e)
    {
        MouseOverHouse = "";
        HideTooltip();
        if (IsHighlighting)
        {
            RemoveListHighlight();
            IsHighlighting = false;
        }
    }

    private async void OnMouseOverGrid(MouseEventArgs e)
    {
        if (IsHighlighting)
        {
            HideTooltip();
            RemoveListHighlight();
            IsHighlighting = false;
        }
        int rowInd = await JSRuntime.InvokeAsync<int>("util.getSFGridRowIndex");
        if (rowInd >= 0 && this.HighlightedRow != rowInd)
        {
            var records = await this.HouseList.GetCurrentViewRecords();
            HighlightInImageMap(records[rowInd].HouseNumber);
            this.HighlightedRow = rowInd;
        }
    }

    private async void OnMouseOutGrid(MouseEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("mapster.deselect");
    }

    private async void HighlightInList(string houseNumber)
    {
        if (await this.HouseList.GetCurrentViewRecords() == null)
            return;

        await this.HouseList.GoToPage(1);
        bool continuePaging = true;

        for (int i = 1; i <= this.HouseList.PageSettings.PageCount; i += 1)
        {
            List<Data.House> page = await this.HouseList.GetCurrentViewRecords();
            for (int j = 0; j < page.Count; j += 1)
            {
                if (page[j].HouseNumber == houseNumber)
                {
                    await this.HouseList.SelectRow(j);
                    continuePaging = false;
                    IsHighlighting = true;
                    break;
                }
            }
            if (continuePaging)
                await this.HouseList.GoToPage(i + 1);
            else
                break;
        }
    }

    private async void RemoveListHighlight()
    {
        await this.HouseList.ClearRowSelection();
    }

    private async void HighlightInImageMap(string houseNumber)
    {
        await JSRuntime.InvokeVoidAsync("mapster.deselect");

        string viewName = Data.HouseMap.ImageNameToVariant(this.Views[this.CurrentView].Source);
        string key = viewName +"_"+ houseNumber;
        if (HouseToStatus.ContainsKey(key))
        {
            string id = this.Views[this.CurrentView].ID;
            string statusKey = HouseToStatus[key];
            await JSRuntime.InvokeVoidAsync("mapster.select", id, id +"-img", statusKey);
        }
    }

    private async void ShowTooltip(double x, double y, string houseNumber)
    {
        string msg;
        Data.House house = null;
        foreach (Data.House h in HouseData)
        {
            if (h.HouseNumber == houseNumber)
            {
                house = h;
                break;
            }
        }

        switch (house.Status)
        {
            case "sold":
                msg = "Såld";
                break;
            case "booked":
                msg = "Reserverad";
                break;
            default:
                msg = "Lgh nr.\t" + houseNumber +
                    "\nBoarea:\t" + house.Sqm + "m²" +
                    "\nPris:\t\t" + house.Price;
                break;
        }

        await JSRuntime.InvokeVoidAsync(
            "util.showTooltip", x, y, msg
        );
    }

    private async void HideTooltip()
    {
        await JSRuntime.InvokeVoidAsync("util.hideTooltip");
    }

    [JSInvokable]
    public static void ChangeLghView(int ind)
    {
        self.CurrentView = ind;
        self.MobileSelection = -1;
        self.StateHasChanged();
    }

    private async void HousingClickedIM(int houseID)
    {
        var mobile = await JSRuntime.InvokeAsync<bool>("util.isDevice");
        if (mobile && MobileSelection != houseID)
        {
            MobileSelection = houseID;
        }
        else
        {
            HideTooltip();
            navManager.NavigateTo("/interior/" + houseID);
        }
    }

    public async void HousingClickedGrid(RowSelectEventArgs<Data.House> args)
    {
        if (args.IsInteracted)
        {
            var mobile = await JSRuntime.InvokeAsync<bool>("util.isDevice");
            if (mobile && MobileSelection != args.Data.ID)
                MobileSelection = args.Data.ID;
            else
                navManager.NavigateTo("/interior/" + args.Data.ID);
        }
    }

    public async void HousingClickedTwiceGrid(RowDeselectEventArgs<Data.House> args)
    {
        if (args.IsInteracted)
        {
            await Task.Delay(50);
            var mobile = await JSRuntime.InvokeAsync<bool>("util.isDevice");
            if (mobile && MobileSelection == args.Data.ID)
                navManager.NavigateTo("/interior/" + args.Data.ID);
        }
    }

    public void Dispose()
    {
        if (!firstRenderDone)
            return;

        _ind = 0;
        DisposeAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("mapster_responsive.dispose");
        await JSRuntime.InvokeVoidAsync("lgh_lista.dispose");
    }
}


<style>

    .container {
        display: flex;
        
      
    }

    #gallery {
        overflow-y: hidden;
        overflow-x: auto;
        white-space: nowrap;
    }

    #gallery span {
        display: contents;
    }

    .gallery-img {
        width: 25%;
        padding: 7px;
        filter: brightness(120%);
        transition-property: filter;
        transition-duration: 0.25s;
    }

    .gallery-img:hover {
        filter: brightness(100%);
        cursor: pointer;
    }

    .e-gridcontent:hover {
        cursor: pointer;
    }

    .e-grid * {
        font-size: 12px !important;
    }

    .e-grid .e-headercell, .e-grid .e-detailheadercell {
        background-color: #415965;
        color: white;
    }

    .e-grid .e-icon-ascending::before, .e-grid-menu .e-icon-ascending::after {
        color: white;
    }

    .e-grid .e-icon-descending::before, .e-grid-menu .e-icon-descending::before {
        color: white;
    }

    .line-1 {
        width: 8.33%;
    }

    .line-2 {
        width: 16.66%;
    }

    .line-3 {
        width: 25%;
    }

    .line-4 {
        width: 33.33%;
    }

    .line-5 {
        width: 41.66%;
    }

    .line-6 {
        width: 50%;
       
    }

    .line-7 {
        width: 58.33%;
    }

    .line-8 {
        width: 66.66%;
    }

    .line-9 {
        width: 75%;
    }

    .line-10 {
        width: 83.33%;
    }

    .line-11 {
        width: 91.66%;
    }

    .line-12 {
        width: 100%;
    }

    [class*="line-"] {
        float: left;
        padding: 7px;
    }

    @@media (max-width: 1467px) {
    }

    @@media (max-width: 927px) {

        .line-1 {
            width: 25%;
        }

        .line-2 {
            width: 100%;
        }

        .line-3 {
            width: 25%;
        }

        .line-4 {
            width: 100%;
        }

        .line-5 {
            width: 100%;
        }

        .line-6 {
            width: 100%;
        }

        .line-7 {
            width: 100%;
        }

        .line-8 {
            width: 100%;
        }

        .line-9 {
            width: 100%;
        }

        .line-10 {
            width: 100%;
        }

        .line-11 {
            width: 100%;
        }

        .line-12 {
            width: 100%;
        }

        [class*="line-"] {
            float: left;
            padding: 3px;
        }

        .e-grid * {
            font-size: 10px !important;
        }

        .e-attr {
            letter-spacing: 1px;
        }

        .gridwidth {
            width: 100%;
        }
    }

    @@media (max-width: 600px) {

        .line-1 {
            width: 25%;
        }

        .line-2 {
            width: 100%;
        }

        .line-3 {
            width: 25%;
        }

        .line-4 {
            width: 100%;
        }

        .line-5 {
            width: 100%;
        }

        .line-6 {
            width: 100%;
        }

        .line-7 {
            width: 100%;
        }

        .line-8 {
            width: 100%;
        }

        .line-9 {
            width: 100%;
        }

        .line-10 {
            width: 100%;
        }

        .line-11 {
            width: 100%;
        }

        .line-12 {
            width: 100%;
        }

        [class*="line-"] {
            float: left;
            padding: 3px;
        }

        .e-grid * {
            font-size: 10px !important;
        }

        .e-headercelldiv {
            padding: 0px !important;
        }

        .e-rowcell {
            padding-left: 10px !important;
            margin: auto !important;
        }
    }
</style>
