
@page "/Colorpicker"

@implements IDisposable
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using BlazorPro.Spinkit




<SpinLoader IsLoading="SelectedImage == null && !ImagesLoaded">
    <LoadingTemplate>
        <div style="text-align:center; padding-top:18%;">
            <span class="loader"><span class="loader-inner"></span></span> <text style="color:#415965; font-weight:bold; font-family:acumin-pro,sans-serif;"> Loading.. </text>
            <Plane Center="true" />
        </div>
    </LoadingTemplate>
    <ContentTemplate>

        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <img src="IMG/pixel.gif" alt="" @onload="OnAfterLoader" style="position: absolute; top: 0px; visibility: hidden;" />

        <div id="fullscreen-image" class="@(ShowFullscreenImage ? "" : "hidden")">
            <div class="fs-bg" @onclick="OnClickClose">
                <div class="fs-border-colorpicker" @onclick:stopPropagation="true">
                    <span class="fs-close" @onclick="OnClickClose"></span>
                </div>
            </div>
        </div>
        <div class="container">
            <div class="slideshowbox">
                <!-- Stillbilder -->
                <div id="slideshow" class="@(ShowInfo ? "" : "full")">
                    <div id="gallery-carousel" class="carousel slide" data-ride="carousel">
                        <ol class="carousel-indicators">
                            @for (int i = 0; i < HouseData.Images.Count; i++)
                            {
                                <li data-target="#gallery-carousel" data-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
                            }
                        </ol>
                        <div class="carousel-inner">
                            @for (int i = 0; i < HouseData.Images.Count; i++)
                            {


                                var _i = i;

                                <div id="carousel-item-@_i" class="carousel-item @(_i == 0 ? "active" : "")">
                                    @if (HouseData.Images[_i].Type == Bostadsvaljare.Data.ImageType.Roundme)
                                    {
                                        <div class="iframe-container">
                                            <iframe frameborder='0' webkitallowfullscreen mozallowfullscreen allowfullscreen src="@HouseData.Images[_i].Link" @onload="OnLoadRoundme"> </iframe>
                                        </div>
                                        <img id="@("carosal" +_i)" src="@HouseData.Images[_i].Source" class="hideit" c_ind="@_i">
                                    }
                                    else
                                    {
                                        <img id="@("carosal" +_i)" src="@HouseData.Images[_i].Source" class="d-block w-100" c_ind="@_i">
                                    }
                                </div>

                            }
                        </div>
                        <a class="carousel-control-prev" href="#gallery-carousel" role="button" data-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="sr-only">Previous</span>
                        </a>
                        <a class="carousel-control-next" href="#gallery-carousel" role="button" data-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="sr-only">Next</span>
                        </a>
                    </div>
                </div>

            </div>



            <div id="gallery" class="gallercontain">
                @for (int i = 0; i < HouseData.Images.Count; i++)
                {
                    var _i = i;
                <span id="gallery-item-@i">
                    <img id="@("galler" + i)" style="display:none" src="@HouseData.Images[i].Source" class="gallery-img" c_ind="@i" @onclick="e=>StaticChangeRoomClick(_i)">
                    <img id="@("galler" + i)" src="@HouseData.Images[i].Thumbnail" class="gallery-img" c_ind="@i" @onclick="e=>StaticChangeRoomClick(_i)">
                </span>
                }
            </div>
        </div>


      

    </ContentTemplate>
</SpinLoader>

@code {
    private static Colorpicker self;
    private static string Project { get; } = "WIJK";

    private bool isChecked = true;
    public Dictionary<string, List<Data.House>> MapData { get; set; }

    [Parameter]
    public string HouseID { get; set; }
    public Data.House House { get; set; }
    public Data.HouseType.Image SelectedImage { get; set; }
    public Data.ImageType SelectedType { get; set; }


    private Data.HouseType HouseData { get; set; }
    private bool ShowFullscreenImage { get; set; } = false;

    private bool ImagesLoaded { get; set; } = false;
    public bool ShowInfo { get; set; } = true;

    private bool InitRoundme { get; set; } = false;
    private bool firstRenderDone = false;



    protected override void OnInitialized()
    {
        base.OnInitialized();

        House = Data.House.Getcolor("0");
        string houseType = House.Housetype;
        HouseData = Data.HouseType.GetData(houseType, Project);
        self = this;
        SelectedImage = HouseData.Images[0];
        base.StateHasChanged();
    }

    private void ToggleInfo()
    {
        ShowInfo = !ShowInfo;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("colorpicker.addResizeListener");
            ImagesLoaded = await JSRuntime.InvokeAsync<bool>("colorpicker.loadImages", House.Housetype, HouseData);
            firstRenderDone = true;
            base.StateHasChanged();
        }
    }

    private async void OnAfterLoader(ProgressEventArgs ev)
    {
        await JSRuntime.InvokeVoidAsync("colorpicker.applyImages", House.Housetype);

        base.StateHasChanged();
        await JSRuntime.InvokeVoidAsync("util.enableClickMenu");
        await JSRuntime.InvokeVoidAsync("util.enableContent");
        await JSRuntime.InvokeVoidAsync("colorpicker.resize");
    }

    private async void OnLoadRoundme(ProgressEventArgs ev)
    {
        await JSRuntime.InvokeVoidAsync("util.matchHeightToWidth", "roundme-embedded");
        InitRoundme = true;
        base.StateHasChanged();
    }

    private void OnClickClose(MouseEventArgs ev)
    {
        ShowFullscreenImage = false;
        base.StateHasChanged();
    }




    public async void StaticChangeRoomClick(int ind)
    {
        Data.HouseType.Image oldImage = SelectedImage;
        SelectedImage = HouseData.Images[ind];
        SelectedType = SelectedImage.Type;
        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("colorpicker.changeRoom", oldImage, SelectedImage);
    }


    public void Dispose()
    {
        if (!firstRenderDone)
            return;

        DisposeAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("colorpicker.dispose");
    }
}

<style>

    body {
        margin: 0;
        overflow: hidden;
    }

    .slideshowbox{
     
        width: 90%;
        
    }



    .container {
        display: flex;
        justify-content: center;
        width: 100%;
        flex-direction: column;
    }

    #gallery {
        display: flex;
        flex-direction: row;
        width: 90%;
        overflow-x: hidden;
       
    }

    .gallery-img {
        width: 100%;
       padding:5px;
    }

        .gallery-img:hover {
            cursor: pointer;
            filter: brightness(120%);
        }

        .gallery-img.active {
            filter: brightness(120%);
        }

    #fullscreen-image {
        position: absolute;
        width: 100%;
        left: 0px;
        top: 0px;
        z-index: 18;
    }
    .fs-bg {
        position: absolute;
        width: 100%;
        left: 0px;
        top: 0px;
        background: rgba(32, 32, 32, 0.3);
    }
    .fs-border-colorpicker {
        position: relative;
        width: 90%;
        margin: auto;
        top: 87px;
        border: 5px solid #fafafa;
        border-radius: 11px;
        box-shadow: 0 0px 8px 0 rgba(0, 0, 0, 0.2), 0 0px 20px 0 rgba(0, 0, 0, 0.19);
    }
    .fs-close {
        position: absolute;
        top: -17px;
        right: -17px;
        background: #415965;

        width: 25px;
        height: 25px;
        border-radius: 5px;
        box-shadow: inset 0 0 9px rgba(16, 16, 16, 0.35);
    }
    .fs-close:hover {
        cursor: pointer;
    }
    .fs-close:before, .fs-close:after {
        content: '';
        height: 25px;
        border-left: 2px solid white;
        position: absolute;
        left: 12px;
    }
    .fs-close:after {
        transform: rotate(45deg);
    }
    .fs-close:before {
        transform: rotate(-45deg);
    }

    #slideshow {
        float: left;
        width: 100%;
        transition-duration: 0.15s;
    }
    #slideshow.full {
        width: 100%;
        transition-duration: 0.45s;
    }


</style>
