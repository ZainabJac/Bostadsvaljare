@*@page "/colorpicker"*@
@page "/colorpicker"

@implements IDisposable
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime


@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Cards
@using BlazorPro.Spinkit


<SpinLoader IsLoading="SelectedImage == null || !ImagesLoaded">
    <LoadingTemplate>
        <div style="text-align:center; padding-top:18%;">
            <span class="loader"><span class="loader-inner"></span></span> <text style="color:#415965; font-weight:bold; font-family:acumin-pro,sans-serif;"> Loading.. </text>
            <Plane Center="true" />
        </div>
    </LoadingTemplate>
    <ContentTemplate>

        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <img src="IMG/pixel.gif" alt="" @onload="OnAfterLoader" style="position: absolute; top: 0px; visibility: hidden;" />

        <div id="fullscreen-image" class="@(ShowFullscreenImage ? "" : "hidden")">
            <div class="fs-bg" @onclick="OnClickClose">
                <div class="fs-border" @onclick:stopPropagation="true">
                    <span class="fs-close" @onclick="OnClickClose"></span>
                </div>
            </div>
        </div>

        <div class="line-11">
            <!-- Stillbilder -->
            <div id="slideshow" class="@(ShowInfo ? "" : "full") @(SelectedType == Bostadsvaljare.Data.ImageType.Image ? "" : "hidden")">
                <div id="gallery-carousel" class="carousel slide" data-ride="carousel">
                    <ol class="carousel-indicators">
                        @for (int i = 0; i < HouseData.Images.Count; i++)
                        {
                            if (HouseData.Images[i].Type != Bostadsvaljare.Data.ImageType.Image)
                                continue;

                            <li data-target="#gallery-carousel" data-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
                        }
                    </ol>
                    <div class="carousel-inner">
                        @for (int i = 0; i < HouseData.Images.Count; i++)
                        {
                            var _i = i;
                            if (HouseData.Images[_i].Type != Bostadsvaljare.Data.ImageType.Image)
                                continue;

                            <div id="carousel-item-@_i" class="carousel-item @(_i == 0 ? "active" : "")">
                            </div>
                        }
                    </div>
                    <a class="carousel-control-prev" href="#gallery-carousel" role="button" data-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="sr-only">Previous</span>
                    </a>
                    <a class="carousel-control-next" href="#gallery-carousel" role="button" data-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="sr-only">Next</span>
                    </a>
                </div>
            </div>

            </div>





            <div id="gallery" style="width: 10%;">
                @for (int i = 0; i < HouseData.Images.Count; i++)
                {
                    <div id="gallery-item-@i" class="line-12">
                    </div>
                }
            </div>

    </ContentTemplate>
</SpinLoader>

@code{
    public Dictionary<string, List<Data.House>> MapData { get; set; }



    [Parameter]
    public string HouseID { get; set; }
    public Data.House House { get; set; }
    public Data.HouseType.Image SelectedImage { get; set; }
    public Data.ImageType SelectedType { get; set; }
    public bool ShowInfo { get; set; } = true;

    private Data.HouseType HouseData { get; set; }
    private bool ShowFullscreenImage { get; set; } = false;
    private int Floor { get; set; } = 0;
    private int Radius { get; set; } = 15;
    private bool ImagesLoaded { get; set; } = false;
    private bool FloorplanInited { get; set; } = false;
    private bool InitVR { get; set; } = false;
    private bool InitRoundme { get; set; } = false;
    private bool firstRenderDone = false;

    private static ColorPicker self;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        House = Data.House.Get(1);
        string houseType = House.Housetype;
        HouseData = Data.HouseType.GetData(houseType);
        self = this;


        SelectedImage = HouseData.Images[0];
        base.StateHasChanged();
    }



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            ImagesLoaded = await JSRuntime.InvokeAsync<bool>("colorpicker.loadImages", House.Housetype, HouseData);
            firstRenderDone = true;
            base.StateHasChanged();
        }
    }

    private async void OnAfterLoader(ProgressEventArgs ev)
    {
        await JSRuntime.InvokeVoidAsync("colorpicker.applyImages", House.Housetype);
        //await JSRuntime.InvokeVoidAsync("pan_viewer.init", "apt_data");

        base.StateHasChanged();
    }

    [JSInvokable("CP_ChangeRoom")]
    public static Data.HouseType.Image[] StaticChangeRoom(int ind)
    {
        Data.HouseType.Image oldImage = self.SelectedImage;
        self.SelectedImage = self.HouseData.Images[ind];
        self.SelectedType = self.SelectedImage.Type;
        self.StateHasChanged();

        return new Data.HouseType.Image[] { oldImage, self.SelectedImage };
    }

    private void OnClickClose(MouseEventArgs ev)
    {
        ShowFullscreenImage = false;
        base.StateHasChanged();
    }

    [JSInvokable("CP_ShowImage")]
    public static void ShowImage()
    {
        self.ShowFullscreenImage = true;
        self.StateHasChanged();
    }

    public void Dispose()
    {
        if (!firstRenderDone)
            return;

        DisposeAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await JSRuntime.InvokeVoidAsync("mapster_responsive.dispose");
        await JSRuntime.InvokeVoidAsync("colorpicker.dispose");
        //await JSRuntime.InvokeVoidAsync("pan_viewer.dispose");
    }
}
<style>

    .rightbutton{
        float: right;
    }

    #fullscreen-image {
        position: absolute;
        width: 100%;
        left: 0px;
        top: 0px;
        z-index: 18;
    }

    .fs-bg {
        position: absolute;
        width: 100%;
        left: 0px;
        top: 0px;
        background: rgba(32, 32, 32, 0.3);
    }

    .fs-border {
        position: relative;
        width: 90%;
        margin: auto;
        top: 87px;
        border: 5px solid #fafafa;
        border-radius: 11px;
        box-shadow: 0 0px 8px 0 rgba(0, 0, 0, 0.2), 0 0px 20px 0 rgba(0, 0, 0, 0.19);
    }

    .fs-close {
        position: absolute;
        top: -17px;
        right: -17px;
        background: #415965;

        width: 25px;
        height: 25px;
        border-radius: 5px;
        box-shadow: inset 0 0 9px rgba(16, 16, 16, 0.35);
    }
    .fs-close:hover {
        cursor: pointer;
    }
    .fs-close:before, .fs-close:after {
        content: '';
        height: 25px;
        border-left: 2px solid white;
        position: absolute;
        left: 12px;
    }
    .fs-close:after {
        transform: rotate(45deg);
    }
    .fs-close:before {
        transform: rotate(-45deg);
    }

    .e-checkbox-wrapper .e-frame{
        border:none;
    }

    .e-checkicon {
        height: 40px;
        width: 40px;
        display:none;

    }

    .e-btn {
        background-color: #415965;
        color: white;
    }

    .e-checkbox-wrapper .e-frame::before {
        content: '\e78c';
        font-size: 35px;
        color: white;
        background-color: #F9B256;
        border-color: none;
        outline: none;
        height: 40px;
        width: 40px;
    }

    .e-checkicon.e-checkbox-wrapper .e-frame.e-check::before {
        content: '\e799';
        height: 40px;
        width: 40px;

    }

    .e-checkicon.e-checkbox-wrapper .e-check {
        font-size: 35px;
    }


    .btn-group button {
        background-color: #415965; /* Green background */
        border: 1px solid white; /* Green border */
        color: white; /* White text */
        cursor: pointer; /* Pointer/hand icon */
        float: right; /* Float the buttons side by side */
        width: 100%;
        border-radius: 2px;
    }

    /* Clear floats (clearfix hack) */
    .btn-group:after {
        content: "";
        clear: both;
        display: table;
    }

    /* Add a background color on hover */
    .btn-group button:hover {
        background-color: #576f7a;
    }

    .e-chip-list.e-chip, .e-chip-list .e-chip {
        border-radius: 3px;
        background-color: #fafafa;
        color: #415965;
        font-family: acumin-pro,sans-serif;
        padding: 7px;
    }

    .e-card {
        font-family: acumin-pro,sans-serif;
    }

    .italicfont {
        font-family: acumin-pro,sans-serif;
        font-size: 12px;
        font-style: italic;
        text-size-adjust: none;
    }

    .line-1 {
        width: 8.33%;
    }

    .last {
        margin-right: initial;
    }

    .line-2 {
        width: 16.66%;
    }

    .line-3 {
        width: 25%;
    }

    .line-4 {
        width: 33.33%;
    }

    .arkitekt {
        padding-top: 14px;
    }

    .line-5 {
        width: 41.66%;
    }

    .line-6 {
        width: 50%;
    }

    .line-7 {
        width: 58.33%;
    }

    .line-8 {
        width: 66.66%;
    }

    .line-9 {
        width: 75%;
    }

    .line-10 {
        width: 83.33%;
    }

    .line-11 {
        width: 91.66%;
    }

    .line-12 {
        width: 100%;
    }

    [class*="line-"] {
        float: left;
        padding: 7px;
    }

    #slideshow {
        float: left;
        width: 100%;
        height: auto;
        transition-duration: 0.15s;
    }

    #slideshow.full {
        width: 100%;
        transition-duration: 0.45s;
    }

    canvas {
        margin: auto;
        width: 100%;
    }

    #pan_container {
        width: 100%;
    }

    #pan_container.fullscreen {
        position: absolute;
        left: 0px;
        top: 0px;
        z-index: 100000;
    }

    #pan_fullscreen-btn {
        position: absolute;
        right: 5px;
        bottom: 5px;

    }
    #pan_fullscreen-btn:hover {
        cursor: pointer;
    }
    #pan_fullscreen-btn::before {
        content: '';
        background-image: url(IMG/icons/pan/fullscreen_on_icon.png);
        width: 48px;
        height: 48px;
        background-size: 48px 48px;
        display: inline-block;
        filter: brightness(45%) sepia(1) saturate(10000%) hue-rotate(183deg);
    }

    .pan_el.fullscreen {
        position: absolute;
        right: 0px;
        top: 0px;
        z-index: 110000;
        width: 20%;
    }


    #housing_info {
        float: right;
        width: 33%;
        font-family: acumin-pro,sans-serif;
        transition: width 0.1s 0.5s, opacity 0.4s 0.5s, display 0.5s 0.5s;
        @*transition-duration: 0.35s;*@
        @*transition-delay: 0.25s;*@
    }

    #housing_info.hidden {
        display: none;
        width: 25%;
        opacity: 0;
        @*transition-duration: 0.05s;
        transition-delay: 0s;*@
    }

    #gallery {
        padding: 0px;
        overflow-y: auto;
        overflow-x: hidden;
        white-space: nowrap;
    }

    #gallery span {
        display: contents;
    }


    #hide_info {
        position: fixed;
        bottom: 0px;
        right: 0px;
        transition-duration: 0.4s;
    }

    #hide_info:hover {
        width: 50px;
    }

    .gallery-img {
        width: 25%;
        padding: 7px;
        filter: brightness(120%);
        transition-property: filter;
        transition-duration: 0.25s;
    }

    .gallery-img:hover {
        filter: brightness(100%);
        cursor: pointer;
    }

    .gallery-img.active {
        filter: brightness(100%);
    }

    .card-info-header {
        font-family: acumin-pro,sans-serif;
        font-size: 18px;
        display: inline-block;
        text-size-adjust: none;
    }

    .card-info-text {
        font-family: acumin-pro,sans-serif;
        font-size: 12px;
        display: inline-block;
        text-size-adjust: none;
    }

    .card-info-header-right {
        font-family: acumin-pro,sans-serif;
        font-size: 18px;
        display: inline-block;
        float: right;
        text-size-adjust: none;
    }

    .list1 {
        list-style-type: none;
    }

    e-info-icon::before {
        content: url(IMG/icons/info_tiny.png);
    }

    .icon {
        width: 32px;
    }

    .e-btn.e-primary {
        margin-top: 5px;
    }

</style>
